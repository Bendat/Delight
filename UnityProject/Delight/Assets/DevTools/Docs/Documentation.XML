<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Delight.Assets">
            <summary>
            Main access point for all the assets used by the framework. 
            </summary>
            <summary>
            Contains references to asset bundle data.
            </summary>
        </member>
        <member name="T:Delight.AssetBundleData">
            <summary>
            AssetBundle data provider. Contains references to all asset bundles in the project.
            </summary>
            <summary>
            Asset bundle data provider. Contains all the asset bundles used by the framework.
            </summary>
        </member>
        <member name="T:Delight.MaterialAsset">
            <summary>
            Manages a UnityEngine.Material object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.MaterialAssetData">
            <summary>
            MaterialAsset data provider. Contains references to all materials in the project.
            </summary>
        </member>
        <member name="T:Delight.FontAsset">
            <summary>
            Manages a UnityEngine.Font object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.FontAssetData">
            <summary>
            FontAsset data provider. Contains references to all fonts in the project.
            </summary>
        </member>
        <member name="T:Delight.SpriteAsset">
            <summary>
            Manages a UnityEngine.Sprite object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.SpriteAssetData">
            <summary>
            SpriteAsset data provider. Contains references to all sprites in the project.
            </summary>
        </member>
        <member name="T:Delight.TMP_FontAsset">
            <summary>
            Manages a TMPro.TMP_FontAsset object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TMP_FontAssetData">
            <summary>
            TMP_FontAsset data provider. Contains references to all tmp_fontassets in the project.
            </summary>
        </member>
        <member name="T:Delight.ShaderAsset">
            <summary>
            Manages a UnityEngine.Shader object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.ShaderAssetData">
            <summary>
            ShaderAsset data provider. Contains references to all shaders in the project.
            </summary>
        </member>
        <member name="T:Delight.TMP_ColorGradientAsset">
            <summary>
            Manages a TMPro.TMP_ColorGradient object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TMP_ColorGradientAssetData">
            <summary>
            TMP_ColorGradientAsset data provider. Contains references to all tmp_colorgradients in the project.
            </summary>
        </member>
        <member name="T:Delight.TMP_SpriteAsset">
            <summary>
            Manages a TMPro.TMP_SpriteAsset object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TMP_SpriteAssetData">
            <summary>
            TMP_SpriteAsset data provider. Contains references to all tmp_spriteassets in the project.
            </summary>
        </member>
        <member name="T:Delight.TextureAsset">
            <summary>
            Manages a UnityEngine.Texture object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TextureAssetData">
            <summary>
            TextureAsset data provider. Contains references to all textures in the project.
            </summary>
        </member>
        <member name="T:Delight.TMP_InputValidatorAsset">
            <summary>
            Manages a TMPro.TMP_InputValidator object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TMP_InputValidatorAssetData">
            <summary>
            TMP_InputValidatorAsset data provider. Contains references to all tmp_inputvalidators in the project.
            </summary>
        </member>
        <member name="T:Delight.Config">
            <summary>
            Main access point for the configuration used by the framework.
            </summary>
        </member>
        <member name="T:Delight.Models">
            <summary>
            Static class for accessing the data models. References to models added through partial classes generated by the framework.
            </summary>
        </member>
        <member name="T:Delight.SceneObjectView">
            <summary>
            Base class for all views that has a game object in the scene. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.AfterUnload">
            <summary>
            Called before the view is unloaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.IsActiveChanged(System.Boolean)">
            <summary>
            Called when IsActive property has been changed.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.SetIsActive(System.Boolean)">
            <summary>
            Sets IsActive without notifying parent.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Awake">
            <summary>
            Called once when the script instance is being loaded if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Start">
            <summary>
            Called when the script instance is being enabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnEnable">
            <summary>
            Called when the script instance is being enabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnDisable">
            <summary>
            Called when script becomes disabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.LateUpdate">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.FixedUpdate">
            <summary>
            Frame-rate independent update called if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Ignore">
            <summary>
            Sets view to be ignored (must be called before load). Ignored objects are disabled/ignored in the object hierarchy (but their children aren't).
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.String)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(System.String)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopAllCoroutines">
            <summary>
            Stops all co-routines. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.String,System.Object)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.MoveTo(Delight.View)">
            <summary>
            Moves view to another layout parent. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.DestroyChildren">
            <summary>
            Unloads and removes the child views. 
            </summary>
        </member>
        <member name="P:Delight.SceneObjectView.Name">
            <summary>
            Name of the scene view game object.
            </summary>
        </member>
        <member name="P:Delight.SceneObjectView.GameObject">
            <summary>GameObject in the hierarchy that corresponds to the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.EnableScriptEvents">
            <summary>Boolean indicating if unity script events (Update, LateUpdate, Awake, etc) should be relayed to the view code-behind through the corresponding methods that can be overriden.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.IgnoreObject">
            <summary>Boolean indicating if the view should be ignored. Ignored objects don't run any load logic and don't respond to property changed events.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.IsActive">
            <summary>Boolean indicating if the view is active. Deactivated views deactivates corresponding game object, components, renderers and scripts.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.BeginDrag">
            <summary>Action called when the user begins to drag the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Cancel">
            <summary>Action called when a cancel event occurs.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Click">
            <summary>Action called when the user clicks on the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Deselect">
            <summary>Action called when another view is selected.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Drag">
            <summary>Action called while the user drags the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Drop">
            <summary>Action called when the view accepts a drop.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.EndDrag">
            <summary>Action called when the user stops dragging the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.InitializePotentialDrag">
            <summary>Called when the user initializes a potential drag on the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Move">
            <summary>Action called when a move events occurs.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.MouseDown">
            <summary>Action called when the mouse/touch presses down over the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.MouseEnter">
            <summary>Action called when the mouse enters the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.MouseExit">
            <summary>Action called when the mouse exits the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.MouseUp">
            <summary>Action called when the mouse/touch releases over the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Scroll">
            <summary>Action called when the user scrolls with mouse wheel or track pad over the view.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Select">
            <summary>Action called when the view is selected.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.Submit">
            <summary>Action called when a submit event occurs.</summary>
        </member>
        <member name="P:Delight.SceneObjectView.UpdateSelected">
            <summary>Action called when theobject associated with this EventTrigger is updated.</summary>
        </member>
        <member name="T:Delight.UnityScriptRelay">
            <summary>
            Simple unity component that relays script events (Awake, Update, etc) to scene view.
            </summary>
        </member>
        <member name="T:Delight.Button">
            <summary>
            The button view is a clickable region with text. Has the additional states: Highlighted, Pressed and Disabled. The button can be set to toggle through IsToggleButton and to adjust its size to its text through the AutoSize field.
            </summary>
        </member>
        <member name="P:Delight.Button.TogglePressed">
            <summary>
            Gets value indicating if button is a toggle button and is pressed.
            </summary>
        </member>
        <member name="M:Delight.Button.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.Button.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Button.ToggleValueChanged">
            <summary>
            Called when toggle value changes.
            </summary>
        </member>
        <member name="M:Delight.Button.Label_PropertyChanged(System.Object,System.String)">
            <summary>
            Called when property on button label is changed.
            </summary>
        </member>
        <member name="M:Delight.Button.TextChanged">
            <summary>
            Called when label text changes.
            </summary>
        </member>
        <member name="M:Delight.Button.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.Button.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:Delight.Button.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.Button.IsDisabledChanged">
            <summary>
            Called when the button is disabled/enabled.
            </summary>
        </member>
        <member name="M:Delight.Button.AfterUnload">
            <summary>
            Called after the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.Button.OnDisable">
            <summary>
            Called when the button is disabled.
            </summary>
        </member>
        <member name="M:Delight.Button.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="P:Delight.Button.DefaultWidth">
            <summary>Default width of the button when none is specified.</summary>
        </member>
        <member name="P:Delight.Button.IsToggleButton">
            <summary>Boolean indicating if the button is a toggle button.</summary>
        </member>
        <member name="P:Delight.Button.IsDisabled">
            <summary>Boolean indicating if this button is disabled.</summary>
        </member>
        <member name="P:Delight.Button.ToggleValue">
            <summary>Toggle value of the button.</summary>
        </member>
        <member name="P:Delight.Button.TextPadding">
            <summary>Padding applied when the button autosizes to its content.</summary>
        </member>
        <member name="P:Delight.Button.CanToggleOn">
            <summary>Boolean indicating if the button can be toggled on.</summary>
        </member>
        <member name="P:Delight.Button.CanToggleOff">
            <summary>Boolean indicating if the button can be toggled off.</summary>
        </member>
        <member name="P:Delight.Button.ToggleClick">
            <summary>Action called when the button is toggled.</summary>
        </member>
        <member name="P:Delight.Button.IsMouseOver">
            <summary>Boolean indicating if the mouse is over the button.</summary>
        </member>
        <member name="P:Delight.Button.IsPressed">
            <summary>Boolean indicating if the button is pressed.</summary>
        </member>
        <member name="P:Delight.Button.AutoSize">
            <summary>Enum indicating if and how the button should automatically resize itself to the size of the text.</summary>
        </member>
        <member name="P:Delight.Button.TextOffset">
            <summary>The offset of the button text label.</summary>
        </member>
        <member name="P:Delight.Button.IsCloseButton">
            <summary>Boolean indicating if this is a close button.</summary>
        </member>
        <member name="P:Delight.Button.IsBackButton">
            <summary>Boolean indicating if this is a back button.</summary>
        </member>
        <member name="P:Delight.Button.DisplayLabel">
            <summary>Boolean indicating if the button label should be displayed.</summary>
        </member>
        <member name="P:Delight.Button.Text">
            <summary>Button text.</summary>
        </member>
        <member name="M:Delight.CanvasRendererView.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="P:Delight.CanvasRendererView.HasPopInstruction">
            <summary>Enable 'render stack' pop draw call.</summary>
        </member>
        <member name="P:Delight.CanvasRendererView.MaterialCount">
            <summary>The number of materials usable by this renderer.</summary>
        </member>
        <member name="P:Delight.CanvasRendererView.PopMaterialCount">
            <summary>The number of materials usable by this renderer. Used internally for masking.</summary>
        </member>
        <member name="P:Delight.CanvasRendererView.CullTransparentMesh">
            <summary>Indicates whether geometry emitted by the renderer can be ignored when the vertex color alpha is close to zero for every vertex of the mesh.</summary>
        </member>
        <member name="P:Delight.CanvasRendererView.Cull">
            <summary>Indicates whether geometry emitted by the renderer is ignored.</summary>
        </member>
        <member name="T:Delight.CheckBox">
            <summary>
            A check box view consisting of a box that can be ticked and a text label.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.CheckBox.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.OnCheckBoxChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.CheckBox.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.CheckBoxClick">
            <summary>
            Called when check box is clicked.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="P:Delight.CheckBox.IsChecked">
            <summary>Boolean indicating if the check box is checked.</summary>
        </member>
        <member name="P:Delight.CheckBox.IsDisabled">
            <summary>Boolean indicating if the check box is disabled.</summary>
        </member>
        <member name="P:Delight.CheckBox.IsInteractable">
            <summary>Boolean indicating if the user can interact with the check box.</summary>
        </member>
        <member name="P:Delight.CheckBox.Spacing">
            <summary>Spacing between the check box sprite and the text label.</summary>
        </member>
        <member name="P:Delight.CheckBox.Text">
            <summary>Check box text.</summary>
        </member>
        <member name="T:Delight.Collection">
            <summary>
            Generic collection view. Used by views such as Lists and TabPanel that wants to display dynamic content through the Item property.
            </summary>
        </member>
        <member name="M:Delight.Collection.CreateItem(Delight.BindableObject,System.Type,System.String)">
            <summary>
            Creates new item in collection.
            </summary>
        </member>
        <member name="M:Delight.Collection.GetContentTemplate(System.Type,System.String)">
            <summary>
            Gets content template of the specified type and id. 
            </summary>
        </member>
        <member name="P:Delight.Collection.Items">
            <summary>The data collection that is used to generate the collection view items.</summary>
        </member>
        <member name="P:Delight.Collection.TemplateSelector">
            <summary>Method used to select the template used by the collection. The method takes the data collection item as a parameter and returns the ID of the template that should be used to present the item.</summary>
        </member>
        <member name="T:Delight.ComboBox">
            <summary>
            Presents a static or dynamic list of items in a drop-down.
            </summary>
        </member>
        <member name="P:Delight.ComboBox.ContentTemplates">
            <summary>
            Passes along the template to the combo-box list.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ComboBox.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.IsDropUpChanged">
            <summary>
            Called when IsDropUp field changes.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.ComboBoxButtonClick(Delight.Button)">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.ComboBoxListSelectionChanged(Delight.List,Delight.ItemSelectionActionData)">
            <summary>
            Called when combo box list selection changes.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.SelectItem(System.Int32,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.SelectItem(Delight.BindableObject,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="P:Delight.ComboBox.IsDropUp">
            <summary>Boolean indicating if the combo box list should open above instead of below the button.</summary>
        </member>
        <member name="P:Delight.ComboBox.ShowSelectedItem">
            <summary>Boolean indicating if the selected item should be shown in the button.</summary>
        </member>
        <member name="P:Delight.ComboBox.ItemSelected">
            <summary>Action called when an item is selected.</summary>
        </member>
        <member name="T:Delight.ComboBoxListItem">
            <summary>
            Base view for items displayed within the ComboBox view. Has the extra states: Disabled, Highlighted, Pressed and Selected. 
            </summary>
        </member>
        <member name="M:Delight.DefaultExpanderHeader.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="T:Delight.Expander">
            <summary>
            Expandable view with a header and content. When header is clicked the view expands to show content or collapses to hide it.
            </summary>
        </member>
        <member name="M:Delight.Expander.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Expander.BeforeLoad">
            <summary>
            Called before the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.Expander.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Expander.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.Expander.OnExpanderChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Expander.IsExpandedChanged">
            <summary>
            Called when the field IsExpanded is changed.
            </summary>
        </member>
        <member name="M:Delight.Expander.UpdateLayout(System.Boolean)">
            <summary>
            Updates based on expanded content size.
            </summary>
        </member>
        <member name="M:Delight.Expander.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:Delight.Expander.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.Expander.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="P:Delight.Expander.IsExpanded">
            <summary>Boolean indicating if content is expanded.</summary>
        </member>
        <member name="P:Delight.Expander.IsDisabled">
            <summary>Boolean indicating if the expander button is deisabled.</summary>
        </member>
        <member name="P:Delight.Expander.IsInteractable">
            <summary>Boolean indicating if expander responds to user interaction.</summary>
        </member>
        <member name="P:Delight.Expander.HeaderHeight">
            <summary>Height of the expander header.</summary>
        </member>
        <member name="P:Delight.Expander.ContentMargin">
            <summary>Margin of the expanded content.</summary>
        </member>
        <member name="P:Delight.Expander.HeaderAlignment">
            <summary>Alignment of the expander header.</summary>
        </member>
        <member name="P:Delight.Expander.Text">
            <summary>Expander header text.</summary>
        </member>
        <member name="P:Delight.Expander.Sprite">
            <summary>Expander header icon sprite.</summary>
        </member>
        <member name="P:Delight.Expander.ToggleMode">
            <summary>Enum indicating how the content should be toggled, e.g. if content should be loaded on-demand or be pre-loaded.</summary>
        </member>
        <member name="T:Delight.ExpanderContent">
            <summary>
            Defines the content of an expander.
            </summary>
        </member>
        <member name="P:Delight.ExpanderContent.ContentTemplateData">
            <summary>Holds the content template data.</summary>
        </member>
        <member name="T:Delight.ExpanderHeader">
            <summary>
            Defines the header of an expander.
            </summary>
        </member>
        <member name="P:Delight.ExpanderHeader.ParentExpander">
            <summary>
            Parent expander the expander header resides in.
            </summary>
        </member>
        <member name="M:Delight.ExpanderHeader.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.ExpanderHeader.ExpanderHeaderClick">
            <summary>
            Called when the expander header is clicked. 
            </summary>
        </member>
        <member name="P:Delight.ExpanderHeader.Text">
            <summary>Expander header text.</summary>
        </member>
        <member name="P:Delight.ExpanderHeader.Sprite">
            <summary>Expander header icon sprite.</summary>
        </member>
        <member name="T:Delight.Frame">
            <summary>
            View that resizes itself to its content by default.
            </summary>
        </member>
        <member name="M:Delight.Frame.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Frame.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.Frame.OnFrameChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Frame.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="P:Delight.Frame.AutoSizeToContent">
            <summary>Boolean indicating if the view should resize itself to its content.</summary>
        </member>
        <member name="T:Delight.LayoutGrid">
            <summary>
            View that displays static content in a grid layout (note has the alias Grid in XML). 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.AfterLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the grid. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.ResizeColumn(System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Resizes a column. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.ResizeRow(System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Resizes a row. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.GetColumnDefinition(Delight.UIView)">
            <summary>
            Gets column definition for the specified view.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.GetRowDefinition(Delight.UIView)">
            <summary>
            Gets row definition for the specified view.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.UpdateRowAndColumnDefinitions">
            <summary>
            Updates row and column definition sizes and offsets based on grid size.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.CellChanged">
            <summary>
            Called when the cell index or span of a child has been changed.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.OnCellChanged">
            <summary>
            Called when the cell index or span of a child has been changed. 
            </summary>
        </member>
        <member name="P:Delight.LayoutGrid.Spacing">
            <summary>Spacing between grid row and columns.</summary>
        </member>
        <member name="P:Delight.LayoutGrid.ColumnSpacing">
            <summary>Spacing between grid columns.</summary>
        </member>
        <member name="P:Delight.LayoutGrid.RowSpacing">
            <summary>Spacing between grid rows.</summary>
        </member>
        <member name="P:Delight.LayoutGrid.Rows">
            <summary>Row definitions that determines the proportional or pixel size of each row in the grid as well as their min/max size.</summary>
        </member>
        <member name="P:Delight.LayoutGrid.Columns">
            <summary>Column definitions that determines the proportional or pixel size of each column in the grid as well as their min/max size.</summary>
        </member>
        <member name="T:Delight.RowDefinitions">
            <summary>
            List of row definitions.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinitions">
            <summary>
            List of column definitions.
            </summary>
        </member>
        <member name="T:Delight.RowDefinition">
            <summary>
            Contains information about a row in the grid.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinition">
            <summary>
            Contains information about a column in the grid.
            </summary>
        </member>
        <member name="T:Delight.CellIndex">
            <summary>
            Represents cell index (row, column).
            </summary>
        </member>
        <member name="T:Delight.GridSplitter">
            <summary>
            Allows for resizing of columns and rows in the Grid view. 
            </summary>
        </member>
        <member name="M:Delight.GridSplitter.AfterLoad">
            <summary>
            Called after the view has been loaded.
            </summary>
        </member>
        <member name="P:Delight.GridSplitter.Thickness">
            <summary>The thickness of the grid splitter handles.</summary>
        </member>
        <member name="P:Delight.GridSplitter.InteractionThickness">
            <summary>Indicates how thick the interactable region of the splitter handle is. Can be larger than the actual thickness to make it easer for the user to interact with the handle.</summary>
        </member>
        <member name="P:Delight.GridSplitter.SetSizeOnDragEnded">
            <summary>Boolean indicating if the size of the row/column should be set after the user releases the handle.</summary>
        </member>
        <member name="P:Delight.GridSplitter.SplitMode">
            <summary>Sets if the grid should be split by columns, rows or both.</summary>
        </member>
        <member name="P:Delight.GridSplitter.SplitterColor">
            <summary>Color used by the grid splitter handles.</summary>
        </member>
        <member name="P:Delight.GridSplitter.SplitterSprite">
            <summary>Sprite used by the grid splitter handles.</summary>
        </member>
        <member name="P:Delight.GridSplitter.BePushy">
            <summary>Boolean indicating if resizing one column/row beyond min/max should push into and resize subsequent rows/columns.</summary>
        </member>
        <member name="P:Delight.GridSplitter.OverrideProportionalSize">
            <summary>Boolean indicating if the proportional size of the columns/rows should be overriden when resizing, and set to absolute (pixel) sizes instead.</summary>
        </member>
        <member name="T:Delight.GridSplitterHandle">
            <summary>
            Handle used to resize a rows or column in the Grid view. Created and managed by the GridSplitter view.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.AfterLoad">
            <summary>
            Called after the view has been loaded.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnDrag(Delight.DependencyObject,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the content is dragged.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnBeginDrag(Delight.DependencyObject,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the content is starting to be dragged.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnEndDrag(Delight.DependencyObject,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the content is stopped being dragged.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnInitializePotentialDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is potentially started to be dragged.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.GetHandleOffset">
            <summary>
            Gets current handle offset as vector.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.GetClampedHandleOffset(UnityEngine.Vector2)">
            <summary>
            Gets offset clamped to bounds.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.SetHandleOffset(UnityEngine.Vector2)">
            <summary>
            Sets content offset as vector.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnMouseEnter(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the mouse enters the view.
            </summary>
        </member>
        <member name="M:Delight.GridSplitterHandle.OnMouseExit(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called when the mouse exits the view.
            </summary>
        </member>
        <member name="P:Delight.GridSplitterHandle.IsEnabled">
            <summary>Boolean indicating if the user can interact with the grid splitter handle.</summary>
        </member>
        <member name="T:Delight.Group">
            <summary>
            The group is used to spacially arrange child views next to each other either horizontally or vertically based on the Orientation property.
            </summary>
        </member>
        <member name="M:Delight.Group.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.Group.OnGroupChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Group.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the group. 
            </summary>
        </member>
        <member name="P:Delight.Group.Spacing">
            <summary>The spacing between the horizontally or vertically arranged child views.</summary>
        </member>
        <member name="P:Delight.Group.Orientation">
            <summary>Sets if the group should arrange its item horizontally or vertically.</summary>
        </member>
        <member name="P:Delight.Group.ContentAlignment">
            <summary>Sets the alignment of the child views within the group.</summary>
        </member>
        <member name="T:Delight.Image">
            <summary>
            View that displays an image sprite. Based on the UGUI ImageComponent. Adjusts its size and image type (spliced, etc) to the native sprite if not explicitly set.
            </summary>
        </member>
        <member name="M:Delight.Image.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.BeforeLoad">
            <summary>
            Called before the view has been loaded.
            </summary>
        </member>
        <member name="M:Delight.Image.AfterLoad">
            <summary>
            Called after the view has been loaded.
            </summary>
        </member>
        <member name="M:Delight.Image.SpriteChanged">
            <summary>
            Called when the sprite is changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.ImageChanged">
            <summary>
            Called whenever properties affecting the image are changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="P:Delight.Image.Sprite">
            <summary>The sprite of the view. The value is the name of the sprite asset file without extension, e.g. "mysprite".</summary>
        </member>
        <member name="P:Delight.Image.OverrideSprite">
            <summary>Overrides the default sprite used by this view.</summary>
        </member>
        <member name="P:Delight.Image.Type">
            <summary>Enum indicating what type of sprite the background is.</summary>
        </member>
        <member name="P:Delight.Image.PreserveAspect">
            <summary>Boolean indicating if this sprite should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Delight.Image.FillCenter">
            <summary>Boolean indicating if the center of a Tiled or Sliced sprite should be rendered.</summary>
        </member>
        <member name="P:Delight.Image.FillMethod">
            <summary>Enum indicating the background fill method.</summary>
        </member>
        <member name="P:Delight.Image.FillAmount">
            <summary>Amount of the view shown when Type is set to Filled.</summary>
        </member>
        <member name="P:Delight.Image.FillClockwise">
            <summary>Boolean indicating if the sprite should be filled clockwise or counter-clockwise.</summary>
        </member>
        <member name="P:Delight.Image.FillOrigin">
            <summary>Point of origin of the Fill process. Value means different things with each fill method.</summary>
        </member>
        <member name="P:Delight.Image.AlphaHitTestMinimumThreshold">
            <summary>Alpha values less than the threshold will cause raycast events to pass through the view.</summary>
        </member>
        <member name="P:Delight.Image.UseSpriteMesh">
            <summary>Boolean indicating if the view should use mesh generated by TextureImporter or a simple quad mesh.</summary>
        </member>
        <member name="P:Delight.Image.PixelsPerUnitMultiplier">
            <summary>Pixel per unit modifier to change how sliced sprites are generated.</summary>
        </member>
        <member name="P:Delight.Image.Material">
            <summary>Material used by the sprite.</summary>
        </member>
        <member name="P:Delight.Image.OnCullStateChanged">
            <summary>Callback called when the culling state of this graphic either becomes culled or visible.</summary>
        </member>
        <member name="P:Delight.Image.Maskable">
            <summary>Boolean indicating if the graphic allows masking.</summary>
        </member>
        <member name="P:Delight.Image.IsMaskingGraphic">
            <summary>Boolean indicating if image is a masking graphic.</summary>
        </member>
        <member name="P:Delight.Image.Color">
            <summary>Color of the image. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").</summary>
        </member>
        <member name="P:Delight.Image.RaycastTarget">
            <summary>Boolean indicating if the graphic should be considered a target for raycasting.</summary>
        </member>
        <member name="T:Delight.LayoutRoot">
            <summary>
            Represents a layout root canvas under which all UI views must reside.
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.Update">
            <summary>
            Updates the view. Called once each frame.
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.LateUpdate">
            <summary>
            Updates the view. Called once each frame. 
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.RegisterChangeHandler(Delight.View.ChangeHandler)">
            <summary>
            Registers a change handler to be triggered on next late update.
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.RegisterAnimator(Delight.Animator)">
            <summary>
            Registers an animator to be updated each frame.
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.UnregisterAnimator(Delight.Animator)">
            <summary>
            Unregisters an animator to be updated each frame.
            </summary>
        </member>
        <member name="T:Delight.List">
            <summary>
            The list presents a static or dynamic list of items. The list can be set to be scrollable through the IsScrollable property. items can be made selectable. Items can be arranged vertically or horizontally. The items can overflow or be wrapped to create flowing lists.
            </summary>
        </member>
        <member name="M:Delight.List.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.List.PageIndexChanged">
            <summary>
            Called when the page index has been changed.
            </summary>
        </member>
        <member name="M:Delight.List.CreateItems">
            <summary>
            Generates views from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.List.AfterInitialize">
            <summary>
            Called during initialization. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateNavigationButtons">
            <summary>
            Creates navigation buttons
            </summary>
        </member>
        <member name="M:Delight.List.ContentScrolled">
            <summary>
            Called for virtualized lists to update the realized items.
            </summary>
        </member>
        <member name="M:Delight.List.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.List.AfterUnload">
            <summary>
            Called when the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.List.OnCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:Delight.List.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Handles collection changed events.
            </summary>
        </member>
        <member name="M:Delight.List.ScrollTo(System.Int32,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Scrolls to specified item.
            </summary>
        </member>
        <member name="M:Delight.List.GetVirtualItem(Delight.BindableObject)">
            <summary>
            Gets virtual item from bindable item.
            </summary>
        </member>
        <member name="M:Delight.List.ScrollTo(Delight.BindableObject,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Scrolls to specified item.
            </summary>
        </member>
        <member name="M:Delight.List.ReplaceItems">
            <summary>
            Replaces presented items. 
            </summary>
        </member>
        <member name="M:Delight.List.DestroyItem(Delight.BindableObject)">
            <summary>
            Destroys item in list.
            </summary>
        </member>
        <member name="M:Delight.List.ItemsChanged">
            <summary>
            Called when the list of items has been replaced.
            </summary>
        </member>
        <member name="M:Delight.List.ClearItems">
            <summary>
            Clears the list. 
            </summary>
        </member>
        <member name="M:Delight.List.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.List.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.List.OnListChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateListItem(Delight.BindableObject)">
            <summary>
            Called when a new dynamic list item is to be generated.
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the group. 
            </summary>
        </member>
        <member name="M:Delight.List.UpdateRealizedItems">
            <summary>
            Updates realized items.
            </summary>
        </member>
        <member name="M:Delight.List.UnrealizeItem(Delight.VirtualItem)">
            <summary>
            Unrealizes virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.RealizeItem(Delight.VirtualItem)">
            <summary>
            Realizes virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.CreateRealizedListItem(Delight.VirtualItem)">
            <summary>
            Creates new realized list item from virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.IsVirtualItemInViewport(Delight.VirtualItem)">
            <summary>
            Returns true if the virtual item is visible in the viewport.
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayoutOverflow">
            <summary>
            Updates layout in overflowing lists (default).
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayoutWrapped">
            <summary>
            Updates layout in wrapped lists.
            </summary>
        </member>
        <member name="M:Delight.List.SelectAndScrollToItem(Delight.BindableObject,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Selects item and scrolls to it.
            </summary>
        </member>
        <member name="M:Delight.List.SelectItem(System.Int32,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SelectItem(Delight.BindableObject,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SelectItem(Delight.ListItem,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SetSelected(Delight.ListItem,System.Boolean)">
            <summary>
            Selects or deselects a list item.
            </summary>
        </member>
        <member name="M:Delight.List.SelectVirtualItem(Delight.VirtualItem,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SetSelectedVirtual(Delight.VirtualItem,System.Boolean)">
            <summary>
            Selects or deselects a list item.
            </summary>
        </member>
        <member name="M:Delight.List.DeselectAll">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:Delight.List.GetSelected``1">
            <summary>
            Gets selected item of type.
            </summary>
        </member>
        <member name="M:Delight.List.CheckCanDeselect">
            <summary>
            Checks if an item can be deselected. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateStaticListItems">
            <summary>
            Generates static list items.
            </summary>
        </member>
        <member name="M:Delight.List.UnblockListItemDragEvents(Delight.ListItem)">
            <summary>
            Unblocks drag events from list items, which makes it so draggable items don't block the list from being scrolled.
            </summary>
        </member>
        <member name="M:Delight.List.GetListItem(Delight.BindableObject)">
            <summary>
            Gets list item based belonging to bindable object.
            </summary>
        </member>
        <member name="M:Delight.List.GetActiveListItems">
            <summary>
            Gets list items.
            </summary>
        </member>
        <member name="M:Delight.List.IsOdd(System.Int32)">
            <summary>
            Gets bool inidcating if the number is odd.
            </summary>
        </member>
        <member name="M:Delight.List.GetSelectedItemIndex">
            <summary>
            Gets the index of the currently selected item.
            </summary>
        </member>
        <member name="M:Delight.List.SelectNext(System.Boolean,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Selects next item in list. 
            </summary>
        </member>
        <member name="M:Delight.List.SelectPrevious(System.Boolean,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Selects previous item in list. 
            </summary>
        </member>
        <member name="M:Delight.List.ScrollPageDown(System.Boolean)">
            <summary>
            Scrolls the list down a page.
            </summary>
        </member>
        <member name="M:Delight.List.ScrollPageUp(System.Boolean)">
            <summary>
            Scrolls the list up a page.
            </summary>
        </member>
        <member name="M:Delight.List.GetMaxPageIndex">
            <summary>
            Gets max page index of paged lists.
            </summary>
        </member>
        <member name="M:Delight.List.NextPage">
            <summary>
            Navigates to next page in paged lists.
            </summary>
        </member>
        <member name="M:Delight.List.PreviousPage">
            <summary>
            Navigates to previous page in paged lists.
            </summary>
        </member>
        <member name="M:Delight.List.JumpToPage(System.Int32)">
            <summary>
            Jumps to the specified page in paged lists.
            </summary>
        </member>
        <member name="P:Delight.List.ScrollsHorizontally">
            <summary>
            Returns boolean indicating if list scrolls horizontally. 
            </summary>
        </member>
        <member name="P:Delight.List.Orientation">
            <summary>Orientation of the list.</summary>
        </member>
        <member name="P:Delight.List.Spacing">
            <summary>Horizontal and vertical spacing between the list items.</summary>
        </member>
        <member name="P:Delight.List.HorizontalSpacing">
            <summary>Horizontal spacing between the list items.</summary>
        </member>
        <member name="P:Delight.List.VerticalSpacing">
            <summary>Vertical spacing between the list items.</summary>
        </member>
        <member name="P:Delight.List.Padding">
            <summary>Adds padding to the list.</summary>
        </member>
        <member name="P:Delight.List.ContentAlignment">
            <summary>Alignment of the list items.</summary>
        </member>
        <member name="P:Delight.List.AlternateItems">
            <summary>Boolean indicating if the state of every other (odd) list items should be Alternate by default. Used to alternate the style of list items.</summary>
        </member>
        <member name="P:Delight.List.IsScrollable">
            <summary>Boolean indicating if the list can be scrolled.</summary>
        </member>
        <member name="P:Delight.List.IsVirtualized">
            <summary>Boolean indicating if the list is virtualized. Virtualized lists have far better performance when dealing with large number of items as only items visible in the viewport are generated.</summary>
        </member>
        <member name="P:Delight.List.Overflow">
            <summary>Enum indicating if items should overflow or wrap as they reach the boundaries of the list. Used to create flowing lists.</summary>
        </member>
        <member name="P:Delight.List.SortDirection">
            <summary>Determines the sort direction of the list items.</summary>
        </member>
        <member name="P:Delight.List.ItemSelected">
            <summary>Action called when an item is selected.</summary>
        </member>
        <member name="P:Delight.List.ItemDeselected">
            <summary>Action called when an item is deselected.</summary>
        </member>
        <member name="P:Delight.List.CanSelect">
            <summary>Boolean indicating if the user can select items in the list.</summary>
        </member>
        <member name="P:Delight.List.CanDeselect">
            <summary>Boolean indicating if selected list items can be deselected by clicking on them again.</summary>
        </member>
        <member name="P:Delight.List.CanMultiSelect">
            <summary>Boolean indicating if the user can select multiple list items.</summary>
        </member>
        <member name="P:Delight.List.CanReselect">
            <summary>Boolean indicating if the selected item should be reselected if clicked on again.</summary>
        </member>
        <member name="P:Delight.List.DeselectAfterSelect">
            <summary>Boolean indicating if the item should immediatelly be deselected after being selected.</summary>
        </member>
        <member name="P:Delight.List.SelectOnMouseUp">
            <summary>Boolean indicating if list items should be selected on mouse up.</summary>
        </member>
        <member name="P:Delight.List.SelectedItem">
            <summary>References the data collection item that corresponds to the currently selected list item.</summary>
        </member>
        <member name="P:Delight.List.IsStatic">
            <summary>Boolean indicating if the list is static.</summary>
        </member>
        <member name="P:Delight.List.VirtualItemGetter">
            <summary>If the list is virtualized and when the size of the virtual items are dynamic, the user can specify a VirtualItemGetter that returns the size of the virtual item that corresponds to the data collection item.</summary>
        </member>
        <member name="P:Delight.List.RealizationMargin">
            <summary>Used when IsVirtualized is set to true and determines how close the list item needs to be to the visible viewport in order to be realized.</summary>
        </member>
        <member name="P:Delight.List.DisableItemArrangement">
            <summary>Boolean indicating if the list shouldn't arrange its items. Used if items are arranged elsewhere.</summary>
        </member>
        <member name="P:Delight.List.IsPaged">
            <summary>Boolean indicating if the list is paged. Customize paging through, e.g. PageSize and ShowNavigationButtons properties.</summary>
        </member>
        <member name="P:Delight.List.PageSize">
            <summary>Number of items to be shown per page when IsPaged is set to true.</summary>
        </member>
        <member name="P:Delight.List.PageIndex">
            <summary>Zero-based index of the current page being displayed if IsPaged is set to true.</summary>
        </member>
        <member name="P:Delight.List.PageNavigationGroupOffset">
            <summary>Default offset of page navigation button group.</summary>
        </member>
        <member name="P:Delight.List.PageNavigationGroupAlignment">
            <summary>Default alignment of page navigation button group.</summary>
        </member>
        <member name="P:Delight.List.PageNavigationGroupOrientation">
            <summary>Default orientation of page navigation button group.</summary>
        </member>
        <member name="P:Delight.List.PageNavigationGroupSpacing">
            <summary>Default spacing of page navigation button group.</summary>
        </member>
        <member name="P:Delight.List.ShowNavigationButtons">
            <summary>Enum indicating which navigation buttons should be shown when list is paged.</summary>
        </member>
        <member name="T:Delight.ListItem">
            <summary>
            Base view for items displayed within the List view. Has the extra states: Disabled, Highlighted, Pressed and Selected. 
            </summary>
        </member>
        <member name="P:Delight.ListItem.ParentList">
            <summary>
            Parent list the item resides in.
            </summary>
        </member>
        <member name="P:Delight.ListItem.DefaultItemStyle">
            <summary>
            Returns default item style.
            </summary>
        </member>
        <member name="M:Delight.ListItem.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.IsAlternateChanged">
            <summary>
            Called when IsAlternate changes.
            </summary>
        </member>
        <member name="M:Delight.ListItem.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.ListItem.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.ListItem.OnListItemChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.ListItem.AdjustSizeToContent">
            <summary>
            Adjusts the size of the list item to its content. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:Delight.ListItem.IsSelectedChanged">
            <summary>
            Called when the IsSelected field changes.
            </summary>
        </member>
        <member name="M:Delight.ListItem.SetContentTemplateData(Delight.ContentTemplateData)">
            <summary>
            Sets content template data.
            </summary>
        </member>
        <member name="M:Delight.ListItem.SetState(System.String)">
            <summary>
            Sets state.
            </summary>
        </member>
        <member name="P:Delight.ListItem.Item">
            <summary>References the data collection item bound to this list item (set when the list item resides in a dynamic list).</summary>
        </member>
        <member name="P:Delight.ListItem.IsDisabled">
            <summary>Boolean indicating if the list item is disabled.</summary>
        </member>
        <member name="P:Delight.ListItem.IsAlternate">
            <summary>Boolean indicating if the default state of this list item should be Alternate. Used by lists that has AlternateItems set to True, to alternate the style of every other (odd) list item.</summary>
        </member>
        <member name="P:Delight.ListItem.IsSelected">
            <summary>Boolean indicating if the list item is selected.</summary>
        </member>
        <member name="P:Delight.ListItem.IsPressed">
            <summary>Boolean indicating if the list item is pressed.</summary>
        </member>
        <member name="P:Delight.ListItem.IsMouseOver">
            <summary>Boolean indicating if the mouse is over the list item.</summary>
        </member>
        <member name="P:Delight.ListItem.AutoSizeToContent">
            <summary>Boolean indicating if the list item automatically audjusts its size to its content.</summary>
        </member>
        <member name="P:Delight.ListItem.Length">
            <summary>The length of the list item that corresponds to Height if list is horizontal and Width if vertical.</summary>
        </member>
        <member name="P:Delight.ListItem.Breadth">
            <summary>The breadth of the list item that corresponds to Width if list is horizontal and Height if vertical.</summary>
        </member>
        <member name="P:Delight.ListItem.ContentTemplateData">
            <summary>Holds the content template data.</summary>
        </member>
        <member name="P:Delight.ListItem.ItemSelected">
            <summary>Action called when item is selected.</summary>
        </member>
        <member name="T:Delight.Mask">
            <summary>
            A view that masks any content using the background sprite and color as mask.
            </summary>
        </member>
        <member name="M:Delight.Mask.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="P:Delight.Mask.ShowMaskGraphic">
            <summary>Show the graphic that is associated with the Mask render area.</summary>
        </member>
        <member name="T:Delight.NavigationButton">
            <summary>
            Defines a navigation button that is used by List views to navigate between pages.
            </summary>
        </member>
        <member name="P:Delight.NavigationButton.ParentList">
            <summary>
            Parent list the navigation button resides in.
            </summary>
        </member>
        <member name="M:Delight.NavigationButton.NavigationButtonClick">
            <summary>
            Called when the navigation button is clicked.
            </summary>
        </member>
        <member name="P:Delight.NavigationButton.NavigationType">
            <summary>Type of navigation button this button represents.</summary>
        </member>
        <member name="P:Delight.NavigationButton.PageIndex">
            <summary>Set programmatically to keep track of which page this button navigates to.</summary>
        </member>
        <member name="T:Delight.RadioButton">
            <summary>
            Presents a one-of-many selection option. If multiple radio buttons shares the same parent only one is selected at a time.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.RadioButton.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.OnRadioButtonChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.RadioButton.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.RadioButtonClick">
            <summary>
            Called when radio button is clicked.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="P:Delight.RadioButton.IsChecked">
            <summary>Boolean indicating if the radio button is selected.</summary>
        </member>
        <member name="P:Delight.RadioButton.IsDisabled">
            <summary>Boolean indicating if the radio button is disabled.</summary>
        </member>
        <member name="P:Delight.RadioButton.IsInteractable">
            <summary>Boolean indicating if the user can toggle the radio button.</summary>
        </member>
        <member name="P:Delight.RadioButton.Spacing">
            <summary>The spacing between the radio button image and the label.</summary>
        </member>
        <member name="P:Delight.RadioButton.Text">
            <summary>Radio button text.</summary>
        </member>
        <member name="T:Delight.RawImage">
            <summary>
            Similar to the Image view but displays a Texture2D asset.
            </summary>
        </member>
        <member name="M:Delight.RawImage.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.RawImage.BeforeLoad">
            <summary>
            Called before the view has been loaded.
            </summary>
        </member>
        <member name="M:Delight.RawImage.AfterLoad">
            <summary>
            Called after the view has been loaded.
            </summary>
        </member>
        <member name="M:Delight.RawImage.TextureChanged">
            <summary>
            Called when the texture is changed. 
            </summary>
        </member>
        <member name="M:Delight.RawImage.ImageChanged">
            <summary>
            Called whenever properties affecting the image are changed. 
            </summary>
        </member>
        <member name="M:Delight.RawImage.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="P:Delight.RawImage.Texture">
            <summary>The texture of the view. The value is the name of the texture asset file without extension, e.g. "mytexture".</summary>
        </member>
        <member name="P:Delight.RawImage.UvRect">
            <summary>The texture coordinates.</summary>
        </member>
        <member name="P:Delight.RawImage.OnCullStateChanged">
            <summary>Callback called when the culling state of this graphic either becomes culled or visible.</summary>
        </member>
        <member name="P:Delight.RawImage.Maskable">
            <summary>Boolean indicating if the graphic allows masking.</summary>
        </member>
        <member name="P:Delight.RawImage.IsMaskingGraphic">
            <summary>Boolean indicating if image is a masking graphic.</summary>
        </member>
        <member name="P:Delight.RawImage.Color">
            <summary>Color of the image. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").</summary>
        </member>
        <member name="P:Delight.RawImage.RaycastTarget">
            <summary>Boolean indicating if the graphic should be considered a target for raycasting.</summary>
        </member>
        <member name="P:Delight.RawImage.Material">
            <summary>Material used by the image.</summary>
        </member>
        <member name="T:Delight.RectMask2D">
            <summary>
            A view that masks any content using the background sprite and color as mask. Based on RectMask2D component which has better performance than the regular mask.
            </summary>
        </member>
        <member name="M:Delight.RectMask2D.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="T:Delight.Region">
            <summary>
            View used primarily to section off a region of space in order to spacially arrange child views. Has 100% size by default.
            </summary>
        </member>
        <member name="T:Delight.ScrollableRegion">
            <summary>
            Presents scrollable content with optional scrollbars. Behaves similar to the UGUI Panel component. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.Update">
            <summary>
            Called once per frame.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AfterUnload">
            <summary>
            Called after the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.IsOutOfBounds(UnityEngine.Vector2,System.Boolean@,System.Boolean@)">
            <summary>
            Returns true if content offset is out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.IsOutOfBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean@,System.Boolean@)">
            <summary>
            Returns true if content offset is out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.ResetVelocityIfOutOfBounds(UnityEngine.Vector2)">
            <summary>
            Resets velocity if out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetBounds(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Get bounds. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AdjustContentRegionSizeToChildren">
            <summary>
            Updates the size of the content region. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.Ignore">
            <summary>
            Sets view to be ignored (must be called before load). Ignored objects are disabled/ignored in the object hierarchy (but their children aren't).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnBeginDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is starting to be dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnEndDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is stopped being dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnInitializePotentialDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is potentially started to be dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnScroll(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is scrolled using mouse wheel or track pad.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetClampedOffset(UnityEngine.Vector2)">
            <summary>
            Gets offset clamped to bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetElasticOffset(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Gets elastic offset.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UnblockDragEvents">
            <summary>
            Makes it so draggable child views aren't blocking the region from being dragged. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UnblockDragEvents(System.Collections.Generic.IEnumerable{Delight.SceneObjectView})">
            <summary>
            Makes it so draggable child views aren't blocking the region from being dragged. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UnblockDragEvents(Delight.SceneObjectView)">
            <summary>
            Makes it so a draggable child view isn't blocking the region from being dragged. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.RubberDelta(System.Single,System.Single)">
            <summary>
            Calculate rubber delta.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetContentOffset">
            <summary>
            Gets current content offset as vector.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetContentOffset(UnityEngine.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Sets content offset as vector.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UpdateScrollbars">
            <summary>
            Updates scrollbars based on content offset.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetScrollPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets normalized scroll position (0-1 where 0.5 is scrolled half-way).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetHorizontalScrollPosition(System.Single,System.Boolean)">
            <summary>
            Sets horizontal normalized scroll position (0-1 where 0.5 is scrolled half-way).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetVerticalScrollPosition(System.Single,System.Boolean)">
            <summary>
            Sets vertical normalized scroll position (0-1 where 0.5 is scrolled half-way).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetAbsoluteScrollPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets absolute scroll position in pixels (from 0 to size of scrollable content).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetHorizontalAbsoluteScrollPosition(System.Single,System.Boolean)">
            <summary>
            Sets horizontal absolute scroll position in pixels (from 0 to size of scrollable content).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetVerticalAbsoluteScrollPosition(System.Single,System.Boolean)">
            <summary>
            Sets vertical absolute scroll position in pixels (from 0 to size of scrollable content).
            </summary>
        </member>
        <member name="P:Delight.ScrollableRegion.NormalizedPosition">
            <summary>
            Gets or sets normalized scroll position. TODO make into dependency property so we can bind to it. 
            </summary>
        </member>
        <member name="P:Delight.ScrollableRegion.MaskContent">
            <summary>Boolean indicating if any content outside the bounds of the viewport should be masked.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.HasInertia">
            <summary>Boolean indicating if the should stop immediatelly when the user stops scrolling (when set to False) or if it should decelerate based on DecelerationRate.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.DecelerationRate">
            <summary>Determines how fast the scroll speed decelerates once the user stops scrolling.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.Elasticity">
            <summary>Determines how elastic the viewport is when scrolling outside the bounds of the scrollable content.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.CanScrollHorizontally">
            <summary>Boolean indicating if the region can be scrolled horizontally.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.CanScrollVertically">
            <summary>Boolean indicating if the region can be scrolled vertically.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.ContentAlignment">
            <summary>Alignment of the content.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.AutoSizeContentRegion">
            <summary>Boolean indicating if the scrollable content region should be adjusted to the size of its content or not.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.ScrollBounds">
            <summary>Enum indicating what type of bounds the scrollable region has (Clamped, Elastic or None).</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.DisableInteractionScrollDelta">
            <summary>If set any interaction with child views (clicks, etc) are disabled when the specified amount of pixels has been scrolled. Used e.g. to disable items from being selected while scrolling a selectable list of items.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.ScrollSensitivity">
            <summary>Sets the sensitivity of the scrolling using mouse wheel or track pad.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.HorizontalScrollbarVisibility">
            <summary>Enum indicating the visibility mode of the horizontal scrollbar.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.VerticalScrollbarVisibility">
            <summary>Enum indicating the visibility mode of the vertical scrollbar.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.DisableMouseWheel">
            <summary>Boolean indicating if the mouse wheel is disabled.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.ContentScrolled">
            <summary>Action called whenever the content is scrolled.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.UnblockDragEventsInChildren">
            <summary>Boolean indicating if draggable child views shouldn't block this scrollable region from being scrolled.</summary>
        </member>
        <member name="P:Delight.ScrollableRegion.ScrollEnabled">
            <summary>Boolean indicating if scrolling by the user is enabled.</summary>
        </member>
        <member name="T:Delight.Scrollbar">
            <summary>
            A scrollbar with a draggable handle. Used by the ScrollableRegion view. 
            </summary>
        </member>
        <member name="M:Delight.Scrollbar.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Scrollbar.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the scrollbar. 
            </summary>
        </member>
        <member name="M:Delight.Scrollbar.SetScrollPosition(System.Single,System.Nullable{System.Single})">
            <summary>
            Sets normalized scroll position. 
            </summary>
        </member>
        <member name="P:Delight.Scrollbar.Length">
            <summary>Length of the scrollbar. Corresponds to Width if horizontal and Height if vertical.</summary>
        </member>
        <member name="P:Delight.Scrollbar.Breadth">
            <summary>Breadth of the scrollbar. Corresponds to Height if horizontal and Width if vertical.</summary>
        </member>
        <member name="P:Delight.Scrollbar.Orientation">
            <summary>The orientation of the scrollbar.</summary>
        </member>
        <member name="P:Delight.Scrollbar.ScrollPosition">
            <summary>Sets normalized scroll position (0-1 where 0.5 is scrolled half-way).</summary>
        </member>
        <member name="P:Delight.Scrollbar.ViewportRatio">
            <summary>Value between 0-1 determining the size of the scrollbar handle relative to the viewport.</summary>
        </member>
        <member name="T:Delight.SelectionIndicator">
            <summary>
            Renders a selection box around the parent view. Used by the designer and live editor to indicate selected view. 
            </summary>
        </member>
        <member name="M:Delight.SelectionIndicator.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="T:Delight.Slider">
            <summary>
            Slider with a handle that can be moved with the mouse. Can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="M:Delight.Slider.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Slider.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderValueChanged">
            <summary>
            Called when the value of the slider changes (or any fields affecting the value).
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderBeginDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag begin.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderEndDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag end.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderInitializePotentialDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on potential drag begin (click).
            </summary>
        </member>
        <member name="M:Delight.Slider.SlideTo(System.Single)">
            <summary>
            Sets slider value.
            </summary>
        </member>
        <member name="M:Delight.Slider.SetSlideTo(UnityEngine.EventSystems.PointerEventData,System.Boolean)">
            <summary>
            Slides the slider to the given position.
            </summary>
        </member>
        <member name="M:Delight.Slider.Nearest(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Snaps to nearest value based on number of steps.
            </summary>
        </member>
        <member name="M:Delight.Slider.UpdateSliderPosition(System.Single)">
            <summary>
            Sets slider position based on value.
            </summary>
        </member>
        <member name="P:Delight.Slider.Length">
            <summary>The length of the slider. Corresponds to Width if horizontal and Height if vertical.</summary>
        </member>
        <member name="P:Delight.Slider.Breadth">
            <summary>The breadth of the slider. Corresponds to Height if horizontal and Width if vertical.</summary>
        </member>
        <member name="P:Delight.Slider.Orientation">
            <summary>Orientation of the slider (horizontal or vertical).</summary>
        </member>
        <member name="P:Delight.Slider.Min">
            <summary>Minimum value of the slider.</summary>
        </member>
        <member name="P:Delight.Slider.Max">
            <summary>Maximum value of the slider.</summary>
        </member>
        <member name="P:Delight.Slider.Value">
            <summary>Current value of the slider.</summary>
        </member>
        <member name="P:Delight.Slider.CanSlide">
            <summary>Boolean indicating if the user can interact with the slider.</summary>
        </member>
        <member name="P:Delight.Slider.SetValueOnDragEnded">
            <summary>Boolean indicating that the slider value is set when the user releases the handle.</summary>
        </member>
        <member name="P:Delight.Slider.IsReversed">
            <summary>Boolean indicating if slider direction is reversed.</summary>
        </member>
        <member name="P:Delight.Slider.Steps">
            <summary>Specifies the number of steps there should be between min and max slider value.</summary>
        </member>
        <member name="P:Delight.Slider.ValueChanged">
            <summary>Action called when the slider value changes.</summary>
        </member>
        <member name="T:Delight.Tab">
            <summary>
            Base view for tab content displayed within the TabPanel.
            </summary>
        </member>
        <member name="M:Delight.Tab.SetContentTemplateData(Delight.ContentTemplateData)">
            <summary>
            Sets content template data.
            </summary>
        </member>
        <member name="P:Delight.Tab.ContentTemplateData">
            <summary>Holds the content template data.</summary>
        </member>
        <member name="P:Delight.Tab.Text">
            <summary>Default tab header text.</summary>
        </member>
        <member name="P:Delight.Tab.TabHeaderId">
            <summary>ID of TabHeader belonging to this tab.</summary>
        </member>
        <member name="T:Delight.TabHeader">
            <summary>
            Base view for tab headers displayed by the TabPanel.
            </summary>
        </member>
        <member name="P:Delight.TabHeader.ParentTabPanel">
            <summary>
            Parent tab panel the tab header resides in.
            </summary>
        </member>
        <member name="M:Delight.TabHeader.SetContentTemplateData(Delight.ContentTemplateData)">
            <summary>
            Sets content template data.
            </summary>
        </member>
        <member name="P:Delight.TabHeader.ContentTemplateData">
            <summary>Holds the content template data.</summary>
        </member>
        <member name="P:Delight.TabHeader.TabIndex">
            <summary>Index of the tab.</summary>
        </member>
        <member name="T:Delight.TabPanel">
            <summary>
            Arranges content in a series of tabs that can be switched between. Tabs can be oriented horizontallt/vertically and aligned topleft/bottom/etc. Tabs and headers can be static or generated dynamically.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.SelectedTabIndexChanged">
            <summary>
            Called when selected tab index is changed.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabItems">
            <summary>
            Generates tab items from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.AfterUnload">
            <summary>
            Called when the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Handles collection changed events.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ReplaceItems">
            <summary>
            Replaces presented items. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.DestroyItem(Delight.BindableObject)">
            <summary>
            Destroys item in list.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ItemsChanged">
            <summary>
            Called when the list of items has been replaced.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ClearTabItems">
            <summary>
            Clears the list. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabItem(Delight.BindableObject)">
            <summary>
            Called when a new item is to be generated.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateStaticTabItems">
            <summary>
            Generates views from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabHeader(Delight.Tab,Delight.BindableObject)">
            <summary>
            Creates tab header for tab.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.SelectTab(System.Int32)">
            <summary>
            Switches to the specified tab.
            </summary>
        </member>
        <member name="P:Delight.TabPanel.SelectedTabIndex">
            <summary>Selected tab index.</summary>
        </member>
        <member name="P:Delight.TabPanel.IsStatic">
            <summary>Boolean indicating if the tab panel is static.</summary>
        </member>
        <member name="P:Delight.TabPanel.TabHeaderWidth">
            <summary>Default width of tab headers.</summary>
        </member>
        <member name="P:Delight.TabPanel.TabHeaderHeight">
            <summary>Default height of tab headers.</summary>
        </member>
        <member name="P:Delight.TabPanel.TabSelected">
            <summary>Action called when a tab is selected.</summary>
        </member>
        <member name="P:Delight.TabPanel.TabSwitchMode">
            <summary>Enum indicating view switch mode, e.g. if tabs should be loaded on-demand or be pre-loaded.</summary>
        </member>
        <member name="T:Delight.InputField">
            <summary>
            Interactable input field view enabling user to type single or multi-line text. Based on TextMeshPro input field component. 
            </summary>
        </member>
        <member name="M:Delight.InputField.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.InputField.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.AfterChildrenLoaded">
            <summary>
            Called just after the children are loaded, but before dependency properties are loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.TextChanged">
            <summary>
            Called when the input text is changed.
            </summary>
        </member>
        <member name="M:Delight.InputField.TMProInputFieldEndEdit(System.String)">
            <summary>
            Called on input field end edit.
            </summary>
        </member>
        <member name="M:Delight.InputField.TMProInputFieldValueChanged(System.String)">
            <summary>
            Called when input field value has been updated.
            </summary>
        </member>
        <member name="M:Delight.InputField.TMProUpdatePlaceholder">
            <summary>
            Shows or hides placeholder based on text.
            </summary>
        </member>
        <member name="P:Delight.InputField.SetValueOnEndEdit">
            <summary>Boolean indicating if the value of the input field text should be set after the user is done editing.</summary>
        </member>
        <member name="P:Delight.InputField.OnlyTriggerValueChangedFromUI">
            <summary>Boolean indicating if the ValueChanged action only should be called when the user changes the input text and not when it's programmatically changed.</summary>
        </member>
        <member name="P:Delight.InputField.EndEdit">
            <summary>Action called when the user stops editing the input field text.</summary>
        </member>
        <member name="P:Delight.InputField.ValueChanged">
            <summary>Action called when the input text changes.</summary>
        </member>
        <member name="P:Delight.InputField.TextMargin">
            <summary>Margin of the input text.</summary>
        </member>
        <member name="P:Delight.InputField.ShouldHideMobileInput">
            <summary>Boolean indicating if mobile input should be hidden.</summary>
        </member>
        <member name="P:Delight.InputField.ShouldHideSoftKeyboard">
            <summary>Boolean indicating if soft keyboard should be hidden.</summary>
        </member>
        <member name="P:Delight.InputField.Text">
            <summary>Text of the input field.</summary>
        </member>
        <member name="P:Delight.InputField.CaretBlinkRate">
            <summary>The blinking rate of the input caret in cycles per second.</summary>
        </member>
        <member name="P:Delight.InputField.CaretWidth">
            <summary>Width of the caret.</summary>
        </member>
        <member name="P:Delight.InputField.TextViewport">
            <summary>Reference to the text viewport.</summary>
        </member>
        <member name="P:Delight.InputField.TextComponent">
            <summary>Reference to the text component.</summary>
        </member>
        <member name="P:Delight.InputField.Placeholder">
            <summary>Placeholder graphics used by the input field.</summary>
        </member>
        <member name="P:Delight.InputField.VerticalScrollbar">
            <summary>Reference to a vertical scrollbar used by the input field.</summary>
        </member>
        <member name="P:Delight.InputField.ScrollSensitivity">
            <summary>Indicates the sensitivity of scrolling the input field text.</summary>
        </member>
        <member name="P:Delight.InputField.CaretColor">
            <summary>Color of the caret if CustomCaretColor is set.</summary>
        </member>
        <member name="P:Delight.InputField.CustomCaretColor">
            <summary>Boolean indicating if caret color is customized by CaretColor.</summary>
        </member>
        <member name="P:Delight.InputField.SelectionColor">
            <summary>Color of the selection.</summary>
        </member>
        <member name="P:Delight.InputField.OnEndEdit">
            <summary>Called when the user stops editing the input field.</summary>
        </member>
        <member name="P:Delight.InputField.OnSubmit">
            <summary>Called when submit event occurs.</summary>
        </member>
        <member name="P:Delight.InputField.OnSelect">
            <summary>Called when input field is selected.</summary>
        </member>
        <member name="P:Delight.InputField.OnDeselect">
            <summary>Called when input field is deselected.</summary>
        </member>
        <member name="P:Delight.InputField.OnTextSelection">
            <summary>Called when text is selected.</summary>
        </member>
        <member name="P:Delight.InputField.OnEndTextSelection">
            <summary>Called when text selections ends.</summary>
        </member>
        <member name="P:Delight.InputField.OnValueChanged">
            <summary>Called when value is changed.</summary>
        </member>
        <member name="P:Delight.InputField.OnTouchScreenKeyboardStatusChanged">
            <summary>Called when touch screen keyboard status changes.</summary>
        </member>
        <member name="P:Delight.InputField.OnValidateInput">
            <summary>Called when input is validated.</summary>
        </member>
        <member name="P:Delight.InputField.CharacterLimit">
            <summary>How many characters the input field is limited to (0 = infinite).</summary>
        </member>
        <member name="P:Delight.InputField.PointSize">
            <summary>Specifies the point size of the input field text.</summary>
        </member>
        <member name="P:Delight.InputField.FontAsset">
            <summary>Font asset used by input field.</summary>
        </member>
        <member name="P:Delight.InputField.OnFocusSelectAll">
            <summary>Called when focused and all is selected.</summary>
        </member>
        <member name="P:Delight.InputField.ResetOnDeActivation">
            <summary>Boolean indicating if input field is reset on deactivation.</summary>
        </member>
        <member name="P:Delight.InputField.RestoreOriginalTextOnEscape">
            <summary>Boolean indicating if original text should be restored when user presses escape.</summary>
        </member>
        <member name="P:Delight.InputField.IsRichTextEditingAllowed">
            <summary>Boolean indicating if rich text editing is allowed.</summary>
        </member>
        <member name="P:Delight.InputField.ContentType">
            <summary>The type of input expected.</summary>
        </member>
        <member name="P:Delight.InputField.LineType">
            <summary>Line type used by the input field.</summary>
        </member>
        <member name="P:Delight.InputField.LineLimit">
            <summary>How many lines the input field is limited to (0 = infinite).</summary>
        </member>
        <member name="P:Delight.InputField.InputType">
            <summary>Type of input expected.</summary>
        </member>
        <member name="P:Delight.InputField.KeyboardType">
            <summary>Enum indicating touch screen keyboard type.</summary>
        </member>
        <member name="P:Delight.InputField.CharacterValidation">
            <summary>The type of validation to perform on a character.</summary>
        </member>
        <member name="P:Delight.InputField.InputValidator">
            <summary>Input validator used by the input field.</summary>
        </member>
        <member name="P:Delight.InputField.ReadOnly">
            <summary>Boolean indicating if the input field is read only.</summary>
        </member>
        <member name="P:Delight.InputField.RichText">
            <summary>Boolean indicating if input is rich text.</summary>
        </member>
        <member name="P:Delight.InputField.AsteriskChar">
            <summary>Character used for password fields.</summary>
        </member>
        <member name="P:Delight.InputField.CaretPosition">
            <summary>Current InputField caret position (also selection tail).</summary>
        </member>
        <member name="P:Delight.InputField.SelectionAnchorPosition">
            <summary>Determines the anchor position of selection.</summary>
        </member>
        <member name="P:Delight.InputField.SelectionFocusPosition">
            <summary>Selection focus position.</summary>
        </member>
        <member name="P:Delight.InputField.StringPosition">
            <summary>Position of the string.</summary>
        </member>
        <member name="P:Delight.InputField.SelectionStringAnchorPosition">
            <summary>Selection string anchor position.</summary>
        </member>
        <member name="P:Delight.InputField.SelectionStringFocusPosition">
            <summary>Determines the focus position of the selection string.</summary>
        </member>
        <member name="P:Delight.InputField.Navigation">
            <summary>Navigation settings.</summary>
        </member>
        <member name="P:Delight.InputField.Transition">
            <summary>The type of transition that will be applied to the targetGraphic when the state changes.</summary>
        </member>
        <member name="P:Delight.InputField.Colors">
            <summary>The ColorBlock for this selectable object.</summary>
        </member>
        <member name="P:Delight.InputField.SpriteState">
            <summary>The sprite state of this selectable object.</summary>
        </member>
        <member name="P:Delight.InputField.AnimationTriggers">
            <summary>The animation triggers for this selectable object.</summary>
        </member>
        <member name="P:Delight.InputField.TargetGraphic">
            <summary>Graphic that will be transitioned upon.</summary>
        </member>
        <member name="P:Delight.InputField.Interactable">
            <summary>Boolean indicating if input field is interactable.</summary>
        </member>
        <member name="P:Delight.InputField.Image">
            <summary>Convenience function that converts the referenced Graphic to a Image, if possible.</summary>
        </member>
        <member name="T:Delight.Label">
            <summary>
            View that presents text. Based on TextMeshPro text component.
            </summary>
        </member>
        <member name="M:Delight.Label.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Label.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.FontChanged">
            <summary>
            Enables font when loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.TextChanged">
            <summary>
            Called when label text changes.
            </summary>
        </member>
        <member name="M:Delight.Label.SetTextAlignment(Delight.ElementAlignment)">
            <summary>
            Sets text alignment.
            </summary>
        </member>
        <member name="P:Delight.Label.PreferredWidth">
            <summary>
            Preferred width of text.
            </summary>
        </member>
        <member name="P:Delight.Label.PreferredHeight">
            <summary>
            Preferred height of text.
            </summary>
        </member>
        <member name="P:Delight.Label.MaxWidth">
            <summary>Used when AutoSize is true and extends the label to the maxsize then expands vertically.</summary>
        </member>
        <member name="P:Delight.Label.AutoSize">
            <summary>Enum indicating if and how the label should automatically resize itself to the size of the text.</summary>
        </member>
        <member name="P:Delight.Label.AutoSizeTextContainer">
            <summary>Boolean indicating if text container should be resized to text.</summary>
        </member>
        <member name="P:Delight.Label.MaskOffset">
            <summary>Offset of mask graphics.</summary>
        </member>
        <member name="P:Delight.Label.Text">
            <summary>A string containing the text to be displayed.</summary>
        </member>
        <member name="P:Delight.Label.IsRightToLeftText">
            <summary>Boolean indicating if this text flows from right to left.</summary>
        </member>
        <member name="P:Delight.Label.Font">
            <summary>The font of the label. The value is the name of the font asset file without extension, e.g. "myfont".</summary>
        </member>
        <member name="P:Delight.Label.FontSharedMaterial">
            <summary>Shared font material.</summary>
        </member>
        <member name="P:Delight.Label.FontSharedMaterials">
            <summary>Shared font materials.</summary>
        </member>
        <member name="P:Delight.Label.FontMaterial">
            <summary>Font material to be used.</summary>
        </member>
        <member name="P:Delight.Label.FontMaterials">
            <summary>Font materials to be used.</summary>
        </member>
        <member name="P:Delight.Label.FontColor">
            <summary>Color of the font.</summary>
        </member>
        <member name="P:Delight.Label.TextMeshProUGUIAlpha">
            <summary>Alpha value of the text.</summary>
        </member>
        <member name="P:Delight.Label.EnableVertexGradient">
            <summary>Determines if Vertex Color Gradient should be used.</summary>
        </member>
        <member name="P:Delight.Label.ColorGradient">
            <summary>Sets the vertex colors for each of the 4 vertices of the character quads.</summary>
        </member>
        <member name="P:Delight.Label.ColorGradientPreset">
            <summary>Set the vertex colors of the 4 vertices of each character quads.</summary>
        </member>
        <member name="P:Delight.Label.SpriteAsset">
            <summary>Default Sprite Asset used by the text object.</summary>
        </member>
        <member name="P:Delight.Label.TintAllSprites">
            <summary>Determines whether or not the sprite color is multiplies by the vertex color of the text.</summary>
        </member>
        <member name="P:Delight.Label.OverrideColorTags">
            <summary>This overrides the color tags forcing the vertex colors to be the default font color.</summary>
        </member>
        <member name="P:Delight.Label.FaceColor">
            <summary>Sets the color of the _FaceColor property of the assigned material. Changing face color will result in an instance of the material.</summary>
        </member>
        <member name="P:Delight.Label.OutlineColor">
            <summary>Sets the _OutlineColor property of the assigned material. Changing outline color will result in an instance of the material.</summary>
        </member>
        <member name="P:Delight.Label.OutlineWidth">
            <summary>Sets the thickness of the outline of the font. Setting this value will result in an instance of the material.</summary>
        </member>
        <member name="P:Delight.Label.FontSize">
            <summary>The point size of the font.</summary>
        </member>
        <member name="P:Delight.Label.FontWeight">
            <summary>Control the weight of the font if an alternative font asset is assigned for the given weight in the font asset editor.</summary>
        </member>
        <member name="P:Delight.Label.EnableAutoSizing">
            <summary>Enable text auto-sizing.</summary>
        </member>
        <member name="P:Delight.Label.FontSizeMin">
            <summary>Minimum point size of the font when text auto-sizing is enabled.</summary>
        </member>
        <member name="P:Delight.Label.FontSizeMax">
            <summary>Maximum point size of the font when text auto-sizing is enabled.</summary>
        </member>
        <member name="P:Delight.Label.FontStyle">
            <summary>Font style.</summary>
        </member>
        <member name="P:Delight.Label.TextAlignment">
            <summary>Determines the alignment of the text.</summary>
        </member>
        <member name="P:Delight.Label.CharacterSpacing">
            <summary>Determines the spacing between characters in the text.</summary>
        </member>
        <member name="P:Delight.Label.WordSpacing">
            <summary>The amount of additional spacing between words.</summary>
        </member>
        <member name="P:Delight.Label.LineSpacing">
            <summary>The amount of additional spacing to add between each lines of text.</summary>
        </member>
        <member name="P:Delight.Label.LineSpacingAdjustment">
            <summary>The amount of potential line spacing adjustment before text auto sizing kicks in.</summary>
        </member>
        <member name="P:Delight.Label.ParagraphSpacing">
            <summary>The amount of additional spacing to add between each lines of text.</summary>
        </member>
        <member name="P:Delight.Label.CharacterWidthAdjustment">
            <summary>Percentage the width of characters can be adjusted before text auto-sizing begins to reduce the point size.</summary>
        </member>
        <member name="P:Delight.Label.EnableWordWrapping">
            <summary>Controls whether or not word wrapping is applied. When disabled, the text will be displayed on a single line.</summary>
        </member>
        <member name="P:Delight.Label.WordWrappingRatios">
            <summary>Controls the blending between using character and word spacing to fill-in the space for justified text.</summary>
        </member>
        <member name="P:Delight.Label.OverflowMode">
            <summary>Controls the text overflow mode.</summary>
        </member>
        <member name="P:Delight.Label.LinkedTextComponent">
            <summary>The linked text component used for flowing the text from one text component to another.</summary>
        </member>
        <member name="P:Delight.Label.IsLinkedTextComponent">
            <summary>Indicates whether this text component is linked to another.</summary>
        </member>
        <member name="P:Delight.Label.EnableKerning">
            <summary>Determines if kerning is enabled or disabled.</summary>
        </member>
        <member name="P:Delight.Label.ExtraPadding">
            <summary>Adds extra padding around each character. This may be necessary when the displayed text is very small to prevent clipping.</summary>
        </member>
        <member name="P:Delight.Label.RichText">
            <summary>Enables or disables rich text tags.</summary>
        </member>
        <member name="P:Delight.Label.ParseCtrlCharacters">
            <summary>Enables or Disables parsing of CTRL characters in input text.</summary>
        </member>
        <member name="P:Delight.Label.IsOverlay">
            <summary>Sets the RenderQueue along with Ztest to force the text to be drawn last and on top of scene elements.</summary>
        </member>
        <member name="P:Delight.Label.IsOrthographic">
            <summary>Boolean indicating if this graphic is orthographic.</summary>
        </member>
        <member name="P:Delight.Label.EnableCulling">
            <summary>Sets the culling on the shaders. Note changing this value will result in an instance of the material.</summary>
        </member>
        <member name="P:Delight.Label.IgnoreRectMaskCulling">
            <summary>Controls whether or not the text object will be culled when using a 2D Rect Mask.</summary>
        </member>
        <member name="P:Delight.Label.IgnoreVisibility">
            <summary>Forces objects that are not visible to get refreshed.</summary>
        </member>
        <member name="P:Delight.Label.HorizontalMapping">
            <summary>Controls how the face and outline textures will be applied to the text object.</summary>
        </member>
        <member name="P:Delight.Label.VerticalMapping">
            <summary>Controls how the face and outline textures will be applied to the text object.</summary>
        </member>
        <member name="P:Delight.Label.MappingUvLineOffset">
            <summary>Controls the horizontal offset of the UV of the texture mapping mode for each line of the text object.</summary>
        </member>
        <member name="P:Delight.Label.RenderMode">
            <summary>Determines if the Mesh will be rendered.</summary>
        </member>
        <member name="P:Delight.Label.GeometrySortingOrder">
            <summary>Determines the sorting order of the geometry of the text object.</summary>
        </member>
        <member name="P:Delight.Label.VertexBufferAutoSizeReduction">
            <summary>Determines if the data structures allocated to contain the geometry of the text object will be reduced in size if the number of characters required to display the text is reduced by more than 256 characters.</summary>
        </member>
        <member name="P:Delight.Label.FirstVisibleCharacter">
            <summary>The first character which should be made visible in conjunction with the Text Overflow Linked mode.</summary>
        </member>
        <member name="P:Delight.Label.MaxVisibleCharacters">
            <summary>Allows to control how many characters are visible from the input.</summary>
        </member>
        <member name="P:Delight.Label.MaxVisibleWords">
            <summary>Allows to control how many words are visible from the input.</summary>
        </member>
        <member name="P:Delight.Label.MaxVisibleLines">
            <summary>Allows control over how many lines of text are displayed.</summary>
        </member>
        <member name="P:Delight.Label.UseMaxVisibleDescender">
            <summary>Determines if the text's vertical alignment will be adjusted based on visible descender of the text.</summary>
        </member>
        <member name="P:Delight.Label.PageToDisplay">
            <summary>Controls which page of text is shown.</summary>
        </member>
        <member name="P:Delight.Label.TextMargin">
            <summary>Determines the margin of the text.</summary>
        </member>
        <member name="P:Delight.Label.HavePropertiesChanged">
            <summary>Property tracking if any of the text properties have changed. Flag is set before the text is regenerated.</summary>
        </member>
        <member name="P:Delight.Label.IsUsingLegacyAnimationComponent">
            <summary>Property to handle legacy animation component.</summary>
        </member>
        <member name="P:Delight.Label.IsVolumetricText">
            <summary>Determines if the geometry of the characters will be quads or volumetric (cubes).</summary>
        </member>
        <member name="P:Delight.Label.OnCullStateChanged">
            <summary>Called when cull state changes.</summary>
        </member>
        <member name="P:Delight.Label.Maskable">
            <summary>Boolean indicating if graphic is maskable.</summary>
        </member>
        <member name="P:Delight.Label.IsMaskingGraphic">
            <summary>Boolean indicating if this is a masking graphic.</summary>
        </member>
        <member name="P:Delight.Label.RaycastTarget">
            <summary>Boolean indicating if the graphic should be considered a target for raycasting.</summary>
        </member>
        <member name="P:Delight.Label.Material">
            <summary>Material used by graphic.</summary>
        </member>
        <member name="T:Delight.ToggleGroup">
            <summary>
            Group view that makes its child buttons into toggle buttons and ensures only one is toggled at a time.
            </summary>
        </member>
        <member name="T:Delight.UICanvas">
            <summary>
            The canvas view is used to render UI components and controls things like draw sort order, scaling and render mode. Can also be used to reduce draw calls by sectioning off portion of the UI (i.e. that changes a lot) into a separate canvas.
            </summary>
        </member>
        <member name="P:Delight.UICanvas.RenderCamera">
            <summary>ID of the world camera camera used when rendering the canvas.</summary>
        </member>
        <member name="P:Delight.UICanvas.RenderMode">
            <summary>Enum indicating if the canvas is in world or overlay mode.</summary>
        </member>
        <member name="P:Delight.UICanvas.ScaleFactor">
            <summary>Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.</summary>
        </member>
        <member name="P:Delight.UICanvas.ReferencePixelsPerUnit">
            <summary>The number of pixels per unit that is considered the default.</summary>
        </member>
        <member name="P:Delight.UICanvas.OverridePixelPerfect">
            <summary>Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.</summary>
        </member>
        <member name="P:Delight.UICanvas.PixelPerfect">
            <summary>Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.</summary>
        </member>
        <member name="P:Delight.UICanvas.PlaneDistance">
            <summary>How far away from the camera is the Canvas generated.</summary>
        </member>
        <member name="P:Delight.UICanvas.OverrideSorting">
            <summary>Override the sorting of canvas.</summary>
        </member>
        <member name="P:Delight.UICanvas.SortingOrder">
            <summary>Canvas order within a sorting layer.</summary>
        </member>
        <member name="P:Delight.UICanvas.TargetDisplay">
            <summary>For Overlay mode, display index on which the UI canvas will appear.</summary>
        </member>
        <member name="P:Delight.UICanvas.SortingLayerID">
            <summary>Unique ID of the Canvas sorting layer.</summary>
        </member>
        <member name="P:Delight.UICanvas.AdditionalShaderChannels">
            <summary>Enum mask of possible shader channel properties that can also be included when the Canvas mesh is created.</summary>
        </member>
        <member name="P:Delight.UICanvas.SortingLayerName">
            <summary>Name of the Canvas sorting layer.</summary>
        </member>
        <member name="P:Delight.UICanvas.WorldCamera">
            <summary>Reference to the world camera, is automatically set if RenderCamera is set.</summary>
        </member>
        <member name="P:Delight.UICanvas.NormalizedSortingGridSize">
            <summary>The normalized grid size that the canvas will split the renderable area into.</summary>
        </member>
        <member name="P:Delight.UICanvas.UiScaleMode">
            <summary>Determines how UI elements in the Canvas are scaled.</summary>
        </member>
        <member name="P:Delight.UICanvas.CanvasScalerReferencePixelsPerUnit">
            <summary>If a sprite has 'Pixels Per Unit' setting, one pixel in the sprite will cover one unit in the UI.</summary>
        </member>
        <member name="P:Delight.UICanvas.CanvasScalerScaleFactor">
            <summary>Scales all children within the canvas by this factor.</summary>
        </member>
        <member name="P:Delight.UICanvas.ReferenceResolution">
            <summary>The resolution the UI layout is designed for.</summary>
        </member>
        <member name="P:Delight.UICanvas.ScreenMatchMode">
            <summary>A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution.</summary>
        </member>
        <member name="P:Delight.UICanvas.MatchWidthOrHeight">
            <summary>Setting to scale the Canvas to match the width or height of the reference resolution, or a combination.</summary>
        </member>
        <member name="P:Delight.UICanvas.PhysicalUnit">
            <summary>The physical unit to specify positions and sizes in.</summary>
        </member>
        <member name="P:Delight.UICanvas.FallbackScreenDPI">
            <summary>The DPI to assume if the screen DPI is not known.</summary>
        </member>
        <member name="P:Delight.UICanvas.DefaultSpriteDPI">
            <summary>The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting.</summary>
        </member>
        <member name="P:Delight.UICanvas.DynamicPixelsPerUnit">
            <summary>The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text.</summary>
        </member>
        <member name="P:Delight.UICanvas.IgnoreReversedGraphics">
            <summary>Boolean indicating if graphics facing away from the raycaster should be ignored.</summary>
        </member>
        <member name="P:Delight.UICanvas.BlockingObjects">
            <summary>Type of objects that will block graphic raycasts.</summary>
        </member>
        <member name="T:Delight.UIImageView">
            <summary>
            Base class for views that has a background sprite and color. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.UIImageView.SpriteChanged">
            <summary>
            Called when the sprite is changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.ImageChanged">
            <summary>
            Called whenever properties affecting the image are changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.BackgroundIsVisible">
            <summary>
            Returns boolean indicating if background is visible.
            </summary>
        </member>
        <member name="M:Delight.UIImageView.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="P:Delight.UIImageView.MaskContent">
            <summary>Boolean indicating if content of the view should be masked.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundSprite">
            <summary>The background sprite of the view. The value is the name of the sprite asset file without extension, e.g. "mysprite".</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundOverrideSprite">
            <summary>Overrides the default sprite used by this view.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundType">
            <summary>Enum indicating what type of sprite the background is.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundPreserveAspect">
            <summary>Boolean indicating if this sprite should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundFillCenter">
            <summary>Boolean indicating if the center of a Tiled or Sliced sprite should be rendered.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundFillMethod">
            <summary>Enum indicating the background fill method.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundFillAmount">
            <summary>Amount of the view shown when BackgroundType is set to Filled.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundFillClockwise">
            <summary>Boolean indicating if the sprite should be filled clockwise or counter-clockwise.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundFillOrigin">
            <summary>Point of origin of the Fill process. Value means different things with each fill method.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundAlphaHitTestMinimumThreshold">
            <summary>Alpha values less than the threshold will cause raycast events to pass through the view.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundUseSpriteMesh">
            <summary>Boolean indicating if the view should use mesh generated by TextureImporter or a simple quad mesh.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundPixelsPerUnitMultiplier">
            <summary>Pixel per unit modifier to change how sliced sprites are generated.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundMaterial">
            <summary>Material used by the sprite.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundOnCullStateChanged">
            <summary>Callback called when the culling state of this graphic either becomes culled or visible.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundMaskable">
            <summary>Boolean indicating if the graphic allows masking.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundIsMaskingGraphic">
            <summary>Boolean indicating if image is a masking graphic.</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundColor">
            <summary>Background color of the view. Color values can be specified by name (Red, Blue, Coral, etc), hexcode (#aarrggbb or #rrggbb) or rgb/rgba value ("1.0,0.0,0.5" or "1,1,1,0.5").</summary>
        </member>
        <member name="P:Delight.UIImageView.BackgroundRaycastTarget">
            <summary>Boolean indicating if the graphic should be considered a target for raycasting.</summary>
        </member>
        <member name="T:Delight.UIView">
            <summary>
            Base class for UI views. Has properties for doing layout: Width, Height, Margin, Alignment and Offset.
            </summary>
        </member>
        <member name="M:Delight.UIView.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterUnload">
            <summary>
            Called after the view is unloaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.SizeChanged">
            <summary>
            Called when size of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.OnSizeChanged">
            <summary>
            Called when size of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.OffsetChanged">
            <summary>
            Called when a property affecting the offset of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterInitiatedLoad">
            <summary>
            Called when after the top-most load is called. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterInitiatedUnload">
            <summary>
            Called when after the top-most unload is called. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.UIView.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.UIView.NotifyParentOfChildLayoutChanged">
            <summary>
            Notifies parent that the layout of a child has been updated.
            </summary>
        </member>
        <member name="M:Delight.UIView.ChildLayoutChanged">
            <summary>
            Called if a child has changed its layout. 
            </summary>
        </member>
        <member name="M:Delight.UIView.UpdateRectTransform">
            <summary>
            Updates rect transform. 
            </summary>
        </member>
        <member name="M:Delight.UIView.VisibilityChanged">
            <summary>
            Called when the visibility of the view has changed. 
            </summary>
        </member>
        <member name="M:Delight.UIView.GetCanvasGroup">
            <summary>
            Gets canvas group (adds it to the view if it doesn't exist).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Delight.UIView.SetSize(System.Single,System.Single)">
            <summary>
            Sets size of view in pixels.
            </summary>
        </member>
        <member name="M:Delight.UIView.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.ContainsMouse(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Tests if mouse is over this view. 
            </summary>
        </member>
        <member name="M:Delight.UIView.IsActiveChanged(System.Boolean)">
            <summary>
            Called when IsActive property has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.AdjustSizeToContent">
            <summary>
            Adjusts the size of the view to its content. 
            </summary>
        </member>
        <member name="M:Delight.UIView.AdjustSizeToView(Delight.UIView)">
            <summary>
            Adjusts the size of the view to the size of another view. 
            </summary>
        </member>
        <member name="M:Delight.UIView.GetPixelWidth(Delight.UIView)">
            <summary>
            Helper method for getting pixel width of a view.
            </summary>
        </member>
        <member name="M:Delight.UIView.GetPixelHeight(Delight.UIView)">
            <summary>
            Helper method for getting pixel width of a view.
            </summary>
        </member>
        <member name="P:Delight.UIView.ActualWidth">
            <summary>
            Gets actual width of view in pixels. Useful when Width may be specified as percentage and you want actual pixel width.
            </summary>
        </member>
        <member name="P:Delight.UIView.ActualHeight">
            <summary>
            Gets actual height of view in pixels. Useful when Height may be specified as percentage and you want actual pixel height.
            </summary>
        </member>
        <member name="P:Delight.UIView.IsFullScreen">
            <summary>
            Gets boolean indicating if view takes up the entire screen.
            </summary>
        </member>
        <member name="P:Delight.UIView.Width">
            <summary>The width of the view in pixels or percents.</summary>
        </member>
        <member name="P:Delight.UIView.Height">
            <summary>The height of the view in pixels or percents.</summary>
        </member>
        <member name="P:Delight.UIView.OverrideWidth">
            <summary>Overrides regular Width value. Used to e.g. automatically size items without changing the default Width value set.</summary>
        </member>
        <member name="P:Delight.UIView.OverrideHeight">
            <summary>Overrides regular Height value. Used to e.g. automatically size items without changing the default Height value set.</summary>
        </member>
        <member name="P:Delight.UIView.Scale">
            <summary>Scale of the view.</summary>
        </member>
        <member name="P:Delight.UIView.Alignment">
            <summary>Used to align the view relative to the layout parent region it resides in.</summary>
        </member>
        <member name="P:Delight.UIView.Margin">
            <summary>Adding margins to a view changes the size of the area in which its content resides, but it does not change the width or height of the view.</summary>
        </member>
        <member name="P:Delight.UIView.Offset">
            <summary>Determines the offset of the view.</summary>
        </member>
        <member name="P:Delight.UIView.OffsetFromParent">
            <summary>Offset set by a parent view. Used by views like Group to arrange children without changing their own Offset values.</summary>
        </member>
        <member name="P:Delight.UIView.Pivot">
            <summary>The pivot point of the view.</summary>
        </member>
        <member name="P:Delight.UIView.DisableLayoutUpdate">
            <summary>Boolean indicating if automatic layout updates for this view should be disabled. When disabled the view doesn't call UpdateLayout() when properties such as Width, Height, etc. changes.</summary>
        </member>
        <member name="P:Delight.UIView.Alpha">
            <summary>Can be used to adjust the alpha color of this view and all its children. E.g. used for fade in/out animations. Is separate from and different from the background color of the view as it affects the children as well.</summary>
        </member>
        <member name="P:Delight.UIView.IsVisible">
            <summary>Boolean indicating if view is visible or hidden. Invisible views still take up space but aren't interactable and have their alpha set to 0.</summary>
        </member>
        <member name="P:Delight.UIView.RaycastBlockMode">
            <summary>Enum indicating if raycasts should be blocked.</summary>
        </member>
        <member name="P:Delight.UIView.UseFastShader">
            <summary>Boolean indicating if the default UI shader should be replaced by a simpler and faster one. The faster shader does not support masking and clipping.</summary>
        </member>
        <member name="P:Delight.UIView.FastMaterial">
            <summary>Faster shader used to render the view when UseFastShader is set to True.</summary>
        </member>
        <member name="P:Delight.UIView.BubbleNotifyChildLayoutChanged">
            <summary>Boolean indicating if parent always should be notified when the child changes layout.</summary>
        </member>
        <member name="P:Delight.UIView.IgnoreFlip">
            <summary>Used when doing localization override default behavior of flipping the view Right to Left or Left to Rigth.</summary>
        </member>
        <member name="P:Delight.UIView.Rotation">
            <summary>Rotation of the view.</summary>
        </member>
        <member name="P:Delight.UIView.Position">
            <summary>Directly sets the local position of the view relative to parent. Position otherwise set using the Alignment and Offset properties.</summary>
        </member>
        <member name="T:Delight.ViewSwitcher">
            <summary>
            Provides logic for switching between mutliple child views and displaying one at a time. By default the views are loaded when they are displayed, behavior can be changed through the SwitchMode property. 
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchTo(System.Int32)">
            <summary>
            Switches to view at index.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchTo(Delight.View)">
            <summary>
            Switches to the view specified.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchToAsync(System.Int32)">
            <summary>
            Switches to view at index.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchToAsync(Delight.View)">
            <summary>
            Switches to the view specified.
            </summary>
        </member>
        <member name="P:Delight.ViewSwitcher.SwitchMode">
            <summary>Enum indicating view switch mode, e.g. if views should be loaded on-demand or be pre-loaded.</summary>
        </member>
        <member name="P:Delight.ViewSwitcher.StartView">
            <summary>Sets the ID of the view that should be displayed initially.</summary>
        </member>
        <member name="P:Delight.ViewSwitcher.ShowFirstByDefault">
            <summary>Boolean indicating if the first view in the view switcher should be displayed initially by default.</summary>
        </member>
        <member name="P:Delight.ViewSwitcher.ChildLoadMode">
            <summary>Sets the default LoadMode flag on children. Some flags may be overriden depending on the SwitchMode setting.</summary>
        </member>
        <member name="T:Delight.View">
            <summary>
            Base class for views.
            </summary>
        </member>
        <member name="M:Delight.View.#ctor(Delight.View,Delight.View,System.String,Delight.Template,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:Delight.View.Parent">
            <summary>
            Gets view parent.
            </summary>
        </member>
        <member name="P:Delight.View.LayoutParent">
            <summary>
            Gets or sets layout parent.
            </summary>
        </member>
        <member name="P:Delight.View.ContentContainer">
            <summary>
            Gets or sets content container.
            </summary>
        </member>
        <member name="P:Delight.View.Content">
            <summary>
            Gets content container.
            </summary>
        </member>
        <member name="P:Delight.View.LayoutChildren">
            <summary>
            Gets or sets layout children.
            </summary>
        </member>
        <member name="P:Delight.View.IsLoaded">
            <summary>
            Gets boolean indicating if view is loaded.
            </summary>
        </member>
        <member name="P:Delight.View.Bindings">
            <summary>
            Gets or sets list of bindings.
            </summary>
        </member>
        <member name="P:Delight.View.IsDynamic">
            <summary>
            Boolean indicating if view is dynamic and should be removed completely when unloaded.
            </summary>
        </member>
        <member name="P:Delight.View.StateAnimations">
            <summary>
            Gets or sets list of state transition animations.
            </summary>
        </member>
        <member name="P:Delight.View.LayoutRoot">
            <summary>
            Gets or sets the layout root of the view.
            </summary>
        </member>
        <member name="P:Delight.View.ContentTemplates">
            <summary>
            Returns view content templates. 
            </summary>
        </member>
        <member name="M:Delight.View.ResolveActionHandler(System.Object,System.String,System.Func{System.Object}[])">
            <summary>
            Resolves action handler from name. TODO remove
            </summary>
        </member>
        <member name="M:Delight.View.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.View.OnChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.View.BeforeInitialize">
            <summary>
            Called once in the object's lifetime before construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.View.LoadAsync">
            <summary>
            Loads the view asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadAsyncInternal(System.Boolean,System.Boolean)">
            <summary>
            Loads the view asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.Load">
            <summary>
            Loads the view. Called when load is initiated from an external source.
            </summary>
        </member>
        <member name="M:Delight.View.LoadInternal(System.Boolean)">
            <summary>
            Loads the view. Called internally. 
            </summary>
        </member>
        <member name="M:Delight.View.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterChildrenLoaded">
            <summary>
            Called just after the children are loaded, but before dependency properties are loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.Initialize">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitiatedLoad">
            <summary>
            Called after the top-most view who initiated the load, has been loaded. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitiatedUnload">
            <summary>
            Called after the top-most view who initiated the unload, has been unloaded. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateBindings">
            <summary>
            Updates bindings after children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateBindings(Delight.DependencyObject)">
            <summary>
            Updates bindings to specific target object.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateParentBindings">
            <summary>
            Updates bindings to this view in parent. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadDependencyProperties">
            <summary>
            Loads dependency properties. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadDependencyPropertiesAsync">
            <summary>
            Loads dependency asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.Unload">
            <summary>
            Unloads the view.
            </summary>
        </member>
        <member name="M:Delight.View.UnloadInternal">
            <summary>
            Unloads the view.
            </summary>
        </member>
        <member name="M:Delight.View.UnloadDependencyProperties">
            <summary>
            Unloads dependency properties. 
            </summary>
        </member>
        <member name="M:Delight.View.BeforeUnload">
            <summary>
            Called just before the view and its children are unloaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterUnload">
            <summary>
            Called after the view and its children has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.View.Destroy">
            <summary>
            Unloads the view and removes it from layout parent. 
            </summary>
        </member>
        <member name="M:Delight.View.DestroyChildren">
            <summary>
            Unloads and removes the child views. 
            </summary>
        </member>
        <member name="M:Delight.View.MoveTo(Delight.View)">
            <summary>
            Moves view to another layout parent. 
            </summary>
        </member>
        <member name="M:Delight.View.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.View.GetStateChangingProperties(System.String)">
            <summary>
            Gets list of state changing properties.
            </summary>
        </member>
        <member name="M:Delight.View.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="M:Delight.View.SetContentTemplateData(Delight.ContentTemplateData)">
            <summary>
            Sets content template data.
            </summary>
        </member>
        <member name="P:Delight.View.LoadMode">
            <summary>Enum flags indicating when and how the view should be loaded by the framework. Can be changed when e.g. the view is to be loaded on-demand.</summary>
        </member>
        <member name="M:Delight.OnDemandLoadingExample.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="T:Delight.ActionData">
            <summary>
            Base class for data passed by view actions to handlers.
            </summary>
        </member>
        <member name="T:Delight.Aliases">
            <summary>
            Aliases used when parsing views.
            </summary>
        </member>
        <member name="T:Delight.Animation">
            <summary>
            Controls a collection of animators.
            </summary>
        </member>
        <member name="M:Delight.Animation.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:Delight.Animation.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Delight.Animation.ResetAndStopAnimation">
            <summary>
            Resets and stops animation.
            </summary>
        </member>
        <member name="M:Delight.Animation.ReverseAnimation">
            <summary>
            Reverses the animation. Resumes the animation if paused.
            </summary>
        </member>
        <member name="M:Delight.Animation.PauseAnimation">
            <summary>
            Pauses animation.
            </summary>
        </member>
        <member name="M:Delight.Animation.ResumeAnimation">
            <summary>
            Resumes paused animation.
            </summary>
        </member>
        <member name="M:Delight.Animation.ResetAnimation">
            <summary>
            Resets the animation to its initial state (doesn't stop it).
            </summary>
        </member>
        <member name="P:Delight.Animation.IsRunning">
            <summary>
            Gets a boolean indicating whether this animation is active.
            </summary>
        </member>
        <member name="P:Delight.Animation.IsReversing">
            <summary>
            Gets a boolean indicating whether this animation is reversing.
            </summary>
        </member>
        <member name="P:Delight.Animation.IsCompleted">
            <summary>
            Gets a boolean indicating whether this animation is completed.
            </summary>
        </member>
        <member name="P:Delight.Animation.IsPaused">
            <summary>
            Gets a boolean indicating whether this animation is paused.
            </summary>
        </member>
        <member name="T:Delight.Animator`1">
            <summary>
            Animates the values of a specific property. 
            </summary>
        </member>
        <member name="M:Delight.Animator`1.#ctor(Delight.View)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Animator`1.#ctor(Delight.View,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Boolean,Delight.Animator.EasingFunctionDelegate,System.Func{`0,`0,System.Single,`0},System.Action{`0},System.Func{`0},System.Func{`0},System.Action,Delight.DependencyProperty)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Animator`1.#ctor(Delight.View,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Boolean,Delight.Animator.EasingFunctionDelegate,System.Func{`0,`0,System.Single,`0},System.Action{`0},System.Func{`0},System.Action,Delight.DependencyProperty,System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Animator`1.Update(System.Single)">
            <summary>
            Updates the animation each frame. 
            </summary>
        </member>
        <member name="M:Delight.Animator`1.ResetValue">
            <summary>
            Resets the value. 
            </summary>
        </member>
        <member name="M:Delight.Animator`1.StartAnimation">
            <summary>
            Starts animation.
            </summary>
        </member>
        <member name="T:Delight.Animator">
            <summary>
            Base class for animators.
            </summary>
        </member>
        <member name="M:Delight.Animator.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Animator.Update(System.Single)">
            <summary>
            Updates the animator. Called once per frame.
            </summary>
        </member>
        <member name="M:Delight.Animator.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:Delight.Animator.CompleteAnimation">
            <summary>
            Called when the animation is completed.
            </summary>
        </member>
        <member name="M:Delight.Animator.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Delight.Animator.ResetAndStopAnimation">
            <summary>
            Resets and stops animation.
            </summary>
        </member>
        <member name="M:Delight.Animator.ReverseAnimation">
            <summary>
            Reverses the animation. Resumes the animation if paused.
            </summary>
        </member>
        <member name="M:Delight.Animator.PauseAnimation">
            <summary>
            Pauses animation.
            </summary>
        </member>
        <member name="M:Delight.Animator.ResumeAnimation">
            <summary>
            Resumes paused animation.
            </summary>
        </member>
        <member name="M:Delight.Animator.ResetAnimation">
            <summary>
            Resets the animation to its initial state (doesn't stop it).
            </summary>
        </member>
        <member name="M:Delight.Animator.ResetValue">
            <summary>
            Resets the value. 
            </summary>
        </member>
        <member name="M:Delight.Animator.OnStarted">
            <summary>
            Invokes Started event.
            </summary>
        </member>
        <member name="M:Delight.Animator.OnCompleted">
            <summary>
            Invokes Completed event.
            </summary>
        </member>
        <member name="M:Delight.Animator.OnPaused">
            <summary>
            Invokes Paused event.
            </summary>
        </member>
        <member name="M:Delight.Animator.OnReversed">
            <summary>
            Invokes Reversed event.
            </summary>
        </member>
        <member name="M:Delight.Animator.OnStopped">
            <summary>
            Invokes Stopped event.
            </summary>
        </member>
        <member name="M:Delight.Animator.OnResumed">
            <summary>
            Invokes Resumed event.
            </summary>
        </member>
        <member name="T:Delight.AssetBundle">
            <summary>
            Base class for asset bundles. Loads/unloads the bundle on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.#ctor">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.RegisterReference(System.Object)">
            <summary>
            Registers load object. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.UnregisterReference(System.Object)">
            <summary>
            Registers load object. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.LoadAsync">
            <summary>
            Loads the asset bundle asynchronously, returns the loaded object.
            </summary>
        </member>
        <member name="T:Delight.AssetObject">
            <summary>
            Base class for unity asset object managers. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.RegisterReference(System.Object)">
            <summary>
            Registers that an object references the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.RegisterReferenceAsync(System.Object)">
            <summary>
            Registers that an object references the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.UnregisterReference(System.Object)">
            <summary>
            Unregisters an object from referencing the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.Load">
            <summary>
            Loads asset synchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject.LoadGenericAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject.Unload">
            <summary>
            Unloads the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.GetUnityObject">
            <summary>
            Gets unity object.
            </summary>
        </member>
        <member name="T:Delight.AssetObject`1">
            <summary>
            Generic base class for unity asset object managers. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.Load">
            <summary>
            Load the asset synchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.LoadGenericAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.LoadAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.Unload">
            <summary>
            Unloads the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.GetUnityObject">
            <summary>
            Gets unity object.
            </summary>
        </member>
        <member name="T:Delight.AtomicBindableObject">
            <summary>
            Base class for atomic bindable objects. These are objects that can change internally and be considered "new" objects as they do.
            </summary>
        </member>
        <member name="T:Delight.AttachedProperty`1">
            <summary>
            Base class for attached properties. Attached properties allows values to be associated with views, e.g. <Label Grid.Cell="1,1" /> tells the parent Grid which cell the label should be in.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.#ctor(Delight.BindableObject,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.SetValue(System.Object,`0)">
            <summary>
            Sets attached value and notifies parent.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.GetValue(System.Object)">
            <summary>
            Gets attached property value.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.TryGetValue(System.Object,`0@)">
            <summary>
            Tries getting attached property value.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.SetValueGeneric(System.Object,System.Object)">
            <summary>
            Sets attached value and notifies parent.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.GetValueGeneric(System.Object)">
            <summary>
            Gets attached property value.
            </summary>
        </member>
        <member name="P:Delight.AttachedProperty`1.AttachedValues">
            <summary>
            Gets attached values.
            </summary>
        </member>
        <member name="T:Delight.AttachedProperty">
            <summary>
            Generic base class for attached properties.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty.SetValueGeneric(System.Object,System.Object)">
            <summary>
            Sets attached value and notifies parent.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty.GetValueGeneric(System.Object)">
            <summary>
            Gets attached property value.
            </summary>
        </member>
        <member name="T:Delight.AutoSize">
            <summary>
            Enum indicating view auto size mode.
            </summary>
        </member>
        <member name="T:Delight.BindableCollection`1">
            <summary>
            Base class for bindable generic collections. Bindable collections notifies observers when the collection changes and enables e.g. the List view to update when items are added.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection`1.Find(System.Predicate{`0})">
            <summary>
            Returns first item matching the predicate.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection`1.ToList">
            <summary>
            Gets list from bindable collection.
            </summary>
        </member>
        <member name="T:Delight.BindableCollection">
            <summary>
            Base class for bindable collections. Bindable collections notifies observers when the collection changes and enables e.g. the List view to update when items are added.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Notifies listeners that collection has been changed.
            </summary>
        </member>
        <member name="T:Delight.BindableCollectionSubset`1">
            <summary>
            Contains a subset of items from a parent bindable collection. It's automatically updated when the parent collection changes and allows for things like filtered and sorted collections. 
            </summary>
        </member>
        <member name="M:Delight.BindableCollectionSubset`1.ParentCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the parent collection has been modified. 
            </summary>
        </member>
        <member name="M:Delight.BindableCollectionSubset`1.UpdateData">
            <summary>
            Updates collection if necessary.
            </summary>
        </member>
        <member name="T:Delight.BindableObject">
            <summary>
            Base class for bindable objects. Bindable objects notifies observers when their properties changes which allows for values to be propagated and bindings and UI to update as data changes. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.#ctor">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets property and notifies listeners if value has been changed.
            </summary>
        </member>
        <member name="M:Delight.BindableObject.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has been changed.
            </summary>
        </member>
        <member name="T:Delight.Binding">
            <summary>
            Represents a data-binding (single or multi-binding). 
            </summary>
        </member>
        <member name="M:Delight.Binding.#ctor(System.Collections.Generic.List{Delight.BindingPath},Delight.BindingPath,System.Action,System.Action,System.Boolean)">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Binding.UpdateBinding(System.Boolean)">
            <summary>
            Updates the binding and propagates it. 
            </summary>
        </member>
        <member name="T:Delight.BindingPath">
            <summary>
            Represents a binding target or source. 
            </summary>
        </member>
        <member name="M:Delight.BindingPath.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Func{Delight.BindableObject}})">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.BindingPath.PropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property in the binding sources has been changed.
            </summary>
        </member>
        <member name="T:Delight.BindingType">
            <summary>
            Property binding type.
            </summary>
        </member>
        <member name="T:Delight.CollectionChangeAction">
            <summary>
            Enum indicating how the collection has changed.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Add">
            <summary>
            Item added to collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.AddRange">
            <summary>
            Items added to collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Remove">
            <summary>
            Item removed from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.RemoveRange">
            <summary>
            Items removed from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Replace">
            <summary>
            All items in collection replaced with new set of items.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Clear">
            <summary>
            All items cleared from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.ScrollTo">
            <summary>
            Scroll to specified item.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Select">
            <summary>
            Selects the specified item.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Batch">
            <summary>
            Batch of actions performed.
            </summary>
        </member>
        <member name="T:Delight.CollectionChangedEventArgs">
            <summary>
            Contains arguments for the collection changed event.
            </summary>
        </member>
        <member name="T:Delight.CollectionSelectionEventArgs">
            <summary>
            Contains arguments for the collection selection event.
            </summary>
        </member>
        <member name="T:Delight.CollectionChangedRangeEventArgs">
            <summary>
            Contains arguments for the collection selection event.
            </summary>
        </member>
        <member name="T:Delight.BatchedCollectionChangedEventArgs">
            <summary>
            Contains a batch of collection changed event arguments.
            </summary>
        </member>
        <member name="T:Delight.ContentTemplate">
            <summary>
            Represent a content template. Contains an activator used to instantiate the template. Created in generated code-behind for certain views such as the List view if it has content, which is then used to create dynamic list items.
            </summary>
        </member>
        <member name="T:Delight.ContentTemplateData">
            <summary>
            Content template data. Contains information about data associated with an instantiated content template. 
            </summary>
        </member>
        <member name="T:Delight.DataProvider`1">
            <summary>
            Generic base class for data providers. Provides access to bindable objects of a certain type.
            </summary>
        </member>
        <member name="M:Delight.DataProvider`1.Load(System.String)">
            <summary>
            Loads persisted objects.
            </summary>
        </member>
        <member name="M:Delight.DataProvider`1.Save(System.String)">
            <summary>
            Saves objects to be persisted.
            </summary>
        </member>
        <member name="T:Delight.PersistenceManager`1">
            <summary>
            Persists objects between sessions. 
            </summary>
        </member>
        <member name="M:Delight.PersistenceManager`1.Load(System.String)">
            <summary>
            Loads persisted objects.
            </summary>
        </member>
        <member name="M:Delight.PersistenceManager`1.Save(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Saves objects to be persisted.
            </summary>
        </member>
        <member name="T:Delight.DelightLiveEditor">
            <summary>
            MonoBehavior for live editing.
            </summary>
        </member>
        <member name="T:Delight.DependencyObject">
            <summary>
            Base class for dependency objects. Dependency objects contains the information about the object that dependency properties need.
            </summary>
        </member>
        <member name="P:Delight.DependencyObject.Template">
            <summary>
            Gets dependency object data template.
            </summary>
        </member>
        <member name="P:Delight.DependencyObject.State">
            <summary>
            Gets dependency object state.
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.#ctor(System.String,Delight.Template)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.DependencyProperty`1">
            <summary>
            Dependency property. A dependency property manages the property values of dependency objects (views). Contains information about a property, its default values, various states, and property changed handlers attached.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetValue(Delight.DependencyObject)">
            <summary>
            Gets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetValue(Delight.DependencyObject,`0,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.AttachPropertyChangedHandler(Delight.DependencyObject,`0)">
            <summary>
            Attaches property changed handler. 
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.OnAssetChanged(Delight.DependencyObject)">
            <summary>
            Called when asset has changed. 
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.DetachPropertyChangedHandler(Delight.DependencyObject,`0)">
            <summary>
            Detaches property changed handler from the object.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.Load(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.LoadAsync(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.Unload(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been unloaded. Clears run-time values for the specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetDefault(Delight.DependencyObject,System.Boolean)">
            <summary>
            Gets default value from type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetDefault(Delight.DependencyObject,`0@,System.Boolean)">
            <summary>
            Gets default value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetStateDefault(Delight.DependencyObject)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetStateDefault(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetStateDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetStateDefault(Delight.Template,System.String,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetDefault(Delight.Template,`0)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetStateDefault(System.String,Delight.Template,`0)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetDefaultGeneric(Delight.Template,System.Object)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetStateDefaultGeneric(System.String,Delight.Template,System.Object)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has state value set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property is bound.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property is bound.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetValueGeneric(Delight.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetStateDefaultGeneric(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.DependencyProperty">
            <summary>
            Base class for dependency properties.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.Load(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded. Used e.g. by mapped dependency properties to propagate initial values.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.LoadAsync(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded. Used e.g. by mapped dependency properties to propagate initial values.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.Unload(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has value set for the specified state.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property has binding.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property has binding.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetValue(Delight.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetValueGeneric(Delight.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetDefaultGeneric(Delight.Template,System.Object)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetStateDefaultGeneric(System.String,Delight.Template,System.Object)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.GetStateDefault(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.GetStateDefaultGeneric(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.NotifyPropertyChanged(Delight.DependencyObject)">
            <summary>
            Notifies the property has changed.
            </summary>
        </member>
        <member name="T:Delight.EasingFunctionType">
            <summary>
            Specifies what kind of easing function should be used when values are interpolated.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.Linear">
            <summary>
            Linear easing function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuadraticEaseIn">
            <summary>
            Quadratic ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuadraticEaseOut">
            <summary>
            Quadratic ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuadraticEaseInOut">
            <summary>
            Quadratic ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CubicEaseIn">
            <summary>
            Cubic ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CubicEaseOut">
            <summary>
            Cubic ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CubicEaseInOut">
            <summary>
            Cubic ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuarticEaseIn">
            <summary>
            Quartic ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuarticEaseOut">
            <summary>
            Quartic ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuarticEaseInOut">
            <summary>
            Quartic ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuinticEaseIn">
            <summary>
            Quintic ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuinticEaseOut">
            <summary>
            Quintic ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.QuinticEaseInOut">
            <summary>
            Quintic ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.SineEaseIn">
            <summary>
            Sine ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.SineEaseOut">
            <summary>
            Sine ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.SineEaseInOut">
            <summary>
            Sine ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CircularEaseIn">
            <summary>
            Circular ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CircularEaseOut">
            <summary>
            Circular ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.CircularEaseInOut">
            <summary>
            Circular ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ExponentialEaseIn">
            <summary>
            Expontential ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ExponentialEaseOut">
            <summary>
            Exponential ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ExponentialEaseInOut">
            <summary>
            Exponential ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ElasticEaseIn">
            <summary>
            Elastic ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ElasticEaseOut">
            <summary>
            Elastic ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.ElasticEaseInOut">
            <summary>
            Elastic ease in and out function.
            </summary>         
        </member>
        <member name="F:Delight.EasingFunctionType.BounceEaseIn">
            <summary>
            Bounce ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.BounceEaseOut">
            <summary>
            Bounce ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.BounceEaseInOut">
            <summary>
            Bounce ease in and out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.BackEaseIn">
            <summary>
            Back ease in function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.BackEaseOut">
            <summary>
            Back ease out function.
            </summary>
        </member>
        <member name="F:Delight.EasingFunctionType.BackEaseInOut">
            <summary>
            Back ease in and out function.
            </summary>
        </member>
        <member name="T:Delight.EasingFunctions">
            <summary>
            Easing functions derived from AHEasing, a library of easing functions. Credit goes to warrenm author of AHEasing.
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.Get(Delight.EasingFunctionType)">
            <summary>
            Gets easing function.
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.Get(System.String)">
            <summary>
            Gets easing function.
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.Linear(System.Single)">
            <summary>
            Easing modeled after the line y = x
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuadraticEaseIn(System.Single)">
            <summary>
            Easing modeled after the parabola y = x^2
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuadraticEaseOut(System.Single)">
            <summary>
            Easing modeled after the parabola y = -x^2 + 2x
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuadraticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quadratic
            y = (1/2)((2x)^2)             ; [0, 0.5)
            y = -(1/2)((2x-1)*(2x-3) - 1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CubicEaseIn(System.Single)">
            <summary>
            Easing modeled after the cubic y = x^3
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CubicEaseOut(System.Single)">
            <summary>
            Easing modeled after the cubic y = (x - 1)^3 + 1
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CubicEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise cubic
            y = (1/2)((2x)^3)       ; [0, 0.5)
            y = (1/2)((2x-2)^3 + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuarticEaseIn(System.Single)">
            <summary>
            Easing modeled after the quartic x^4
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuarticEaseOut(System.Single)">
            <summary>
            Easing modeled after the quartic y = 1 - (x - 1)^4
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuarticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quartic
            y = (1/2)((2x)^4)        ; [0, 0.5)
            y = -(1/2)((2x-2)^4 - 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuinticEaseIn(System.Single)">
            <summary>
            Easing modeled after the quintic y = x^5
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuinticEaseOut(System.Single)">
            <summary>
            Easing modeled after the quintic y = (x - 1)^5 + 1
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.QuinticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise quintic
            y = (1/2)((2x)^5)       ; [0, 0.5)
            y = (1/2)((2x-2)^5 + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.SineEaseIn(System.Single)">
            <summary>
            Easing modeled after quarter-cycle of sine wave
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.SineEaseOut(System.Single)">
            <summary>
            Easing modeled after quarter-cycle of sine wave (different phase)
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.SineEaseInOut(System.Single)">
            <summary>
            Easing modeled after half sine wave
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CircularEaseIn(System.Single)">
            <summary>
            Easing modeled after shifted quadrant IV of unit circle
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CircularEaseOut(System.Single)">
            <summary>
            Easing modeled after shifted quadrant II of unit circle
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.CircularEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise circular function
            y = (1/2)(1 - Mathf.Sqrt(1 - 4x^2))           ; [0, 0.5)
            y = (1/2)(Mathf.Sqrt(-(2x - 3)*(2x - 1)) + 1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ExponentialEaseIn(System.Single)">
            <summary>
            Easing modeled after the exponential function y = 2^(10(x - 1))
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ExponentialEaseOut(System.Single)">
            <summary>
            Easing modeled after the exponential function y = -2^(-10x) + 1
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ExponentialEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise exponential
            y = (1/2)2^(10(2x - 1))         ; [0,0.5)
            y = -(1/2)*2^(-10(2x - 1))) + 1 ; [0.5,1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ElasticEaseIn(System.Single)">
            <summary>
            Easing modeled after the damped sine wave y = Mathf.Sin(13pi/2*x)*Mathf.Pow(2, 10 * (x - 1))
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ElasticEaseOut(System.Single)">
            <summary>
            Easing modeled after the damped sine wave y = Mathf.Sin(-13pi/2*(x + 1))*Mathf.Pow(2, -10x) + 1
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.ElasticEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise exponentially-damped sine wave:
            y = (1/2)*Mathf.Sin(13pi/2*(2*x))*Mathf.Pow(2, 10 * ((2*x) - 1))      ; [0,0.5)
            y = (1/2)*(Mathf.Sin(-13pi/2*((2x-1)+1))*Mathf.Pow(2,-10(2*x-1)) + 2) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BackEaseIn(System.Single)">
            <summary>
            Easing modeled after the overshooting cubic y = x^3-x*Mathf.Sin(x*pi)
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BackEaseOut(System.Single)">
            <summary>
            Easing modeled after overshooting cubic y = 1-((1-x)^3-(1-x)*Mathf.Sin((1-x)*pi))
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BackEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function:
            y = (1/2)*((2x)^3-(2x)*Mathf.Sin(2*x*pi))           ; [0, 0.5)
            y = (1/2)*(1-((1-x)^3-(1-x)*Mathf.Sin((1-x)*pi))+1) ; [0.5, 1]
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BounceEaseIn(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BounceEaseOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="M:Delight.EasingFunctions.BounceEaseInOut(System.Single)">
            <summary>
            Easing modeled after the piecewise overshooting cubic function.
            </summary>
        </member>
        <member name="T:Delight.ElementAlignment">
            <summary>
            Enum indicating horizontal and vertical alignment of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Center">
            <summary>
            Element centered horizontally and vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Left">
            <summary>
            Element aligned to the left horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Top">
            <summary>
            Element aligned to the top vertically and centered horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Right">
            <summary>
            Element aligned to the right horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Bottom">
            <summary>
            Element aligned to the bottom vertically and centered horizontally.
            </summary>       
        </member>
        <member name="F:Delight.ElementAlignment.TopLeft">
            <summary>
            Element aligned to the top vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.TopRight">
            <summary>
            Element aligned to the top vertically and to the right horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.BottomLeft">
            <summary>
            Element aligned to the bottom vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.BottomRight">
            <summary>
            Alement aligned to the bottom vertically and to the right horizontally.
            </summary>
        </member>
        <member name="T:Delight.ElementMargin">
            <summary>
            Represents left, top, right and bottom margins or offset of an element.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.AttachListeners(Delight.AtomicBindableObject,Delight.AtomicBindableObject)">
            <summary>
            Attaches listeners to internal objects.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.OnInternalPropertyChanged(System.Object,System.String)">
            <summary>
            Called when an internal object changes.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromLeft(Delight.ElementSize)">
            <summary>
            Gets left margin from left size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromTop(Delight.ElementSize)">
            <summary>
            Gets top margin from top size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromRight(Delight.ElementSize)">
            <summary>
            Gets right margin from right size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromBottom(Delight.ElementSize)">
            <summary>
            Gets bottom margin from bottom size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.ToString">
            <summary>
            Converts margin to string.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.Equals(System.Object)">
            <summary>
            Compares element margins.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Delight.ElementOrientation">
            <summary>
            Enum indicating vertical or horizontal orientation of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementOrientation.Vertical">
            <summary>
            Vertical element orientation.
            </summary>
        </member>
        <member name="F:Delight.ElementOrientation.Horizontal">
            <summary>
            Horizontal element orientation.
            </summary>
        </member>
        <member name="T:Delight.ElementSize">
            <summary>
            Represents size in pixels or percentage of an element. 
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Pixels">
            <summary>
            Gets or sets element size in pixels.
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Percent">
            <summary>
            Gets or sets element size in percents.
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Proportion">
            <summary>
            Gets or sets element size in proportions.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor(System.Single,Delight.ElementSizeUnit)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="value">Size in pixels or percent. Percentages are specified in the range 0-1.</param>
            <param name="unit">Specifies if the size is in pixels or percents.</param>
        </member>
        <member name="M:Delight.ElementSize.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.op_Implicit(System.Single)~Delight.ElementSize">
            <summary>
            Converts float to element size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.op_Implicit(Delight.ElementSize)~System.Single">
            <summary>
            Converts element size to float.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromPixels(System.Single)">
            <summary>
            Gets element size with the specified pixel size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromPercents(System.Single)">
            <summary>
            Gets element size with the specified percent size (0.0 - 1.0).
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromProportion(System.Single)">
            <summary>
            Gets element size with the specified proportion.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.Parse(System.String)">
            <summary>
            Parses string into element size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.ToString">
            <summary>
            Converts element size to string.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.Equals(System.Object)">
            <summary>
            Compares sizes.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Delight.ElementSizeUnit">
            <summary>
            Defines element size unit as pixels or percentage.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Pixels">
            <summary>
            Element size specified in pixels.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Percents">
            <summary>
            Element size specified in percents.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Proportional">
            <summary>
            Element size specified in proportion to other sizes.
            </summary>
        </member>
        <member name="T:Delight.ElementSortDirection">
            <summary>
            Enum indicating sort direction of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementSortDirection.Ascending">
            <summary>
            Ascending element sort direction.
            </summary>
        </member>
        <member name="F:Delight.ElementSortDirection.Descending">
            <summary>
            Descending element sort direction.
            </summary>
        </member>
        <member name="T:Delight.ExtensionMethods">
            <summary>
            Extension methods. Contains extension methods used by the framework.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AfterInitializeInternal``1(``0)">
            <summary>
            Makes sure initializer is called only once per type. 
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Message(System.Exception)">
            <summary>
            Gets readable string from exception.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToArg(System.Single)">
            <summary>
            Converts float to string arguments that can be printed as argument.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToArg(System.Boolean)">
            <summary>
            Converts float to string arguments that can be printed as argument.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets attribute value from XML element.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetLineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets line number from XElement.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FieldTypeName(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Gets code printable name from field info.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FieldTypeName(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets code printable name from property info.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.TypeName(System.Type,System.Boolean)">
            <summary>
            Gets formatted name from type.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends line using format string.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AppendLine(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            Appends line using format with indendation.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Append(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Appends string with indendation.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IIndexOf(System.String,System.String)">
            <summary>
            String.IndexOf ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ILastIndexOf(System.String,System.String)">
            <summary>
            String.LastIndexOf ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IEquals(System.String,System.String)">
            <summary>
            String.Equals ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IStartsWith(System.String,System.String)">
            <summary>
            String.StartsWith ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IContains(System.String,System.String)">
            <summary>
            String.Contains ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IContains(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            List.Contains ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.RemoveComments(System.String)">
            <summary>
            Removes comments from a line.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Same(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Compares two lists of strings are the same ignoring case by default.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Pluralize(System.String,System.String)">
            <summary>
            Pluralizes a table name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToPrivateMemberName(System.String)">
            <summary>
            Converts name of variable/property to private member name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToLocalVariableName(System.String)">
            <summary>
            Converts a variable/property to local variable name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToPropertyName(System.String)">
            <summary>
            Converts a name to property name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetPropertyValue(Delight.BindableObject,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets property value from path using reflection.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetPropertyValue(Delight.BindableObject,System.String)">
            <summary>
            Gets property value from path using reflection.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.SetPropertyValue(Delight.BindableObject,System.String,System.Object)">
            <summary>
            Sets property value on view using reflection.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetMemberInfo(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets member info (property or field) from a type.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets type from member info (property or field).
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AddEventTrigger(UnityEngine.GameObject,Delight.DependencyObject,Delight.ViewAction,UnityEngine.EventSystems.EventTriggerType)">
            <summary>
            Adds event trigger callback.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.HasFlag(System.Enum,System.Enum)">
            <summary>
            Checks if a flag enum has a flag value set.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets distinct elements from a list by some lambda expression.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEach``1(Delight.View,System.Func{``0,System.Boolean},System.Boolean,Delight.DependencyObject,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view layout tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEach``1(Delight.View,System.Action{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForThisAndEach``1(Delight.View,System.Action{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on this view and its children until the action returns false.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEachParent``1(Delight.View,System.Action{``0})">
            <summary>
            Performs an action on all ascendants of a view.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FindParent``1(Delight.View,System.Predicate{``0})">
            <summary>
            Returns first ascendant of type T found that matches the predicate.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FindParent``1(Delight.View)">
            <summary>
            Returns first ascendant of type T found.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FindParent``1(Delight.View,System.String)">
            <summary>
            Returns first ascendant with specified ID and type.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.Predicate{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and returns the first view that matches the predicate.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T found.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.String,System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T with the specified ID.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetChildren``1(Delight.View,System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Gets a list of all descendants. 
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetChildren``1(Delight.View,System.Func{``0,System.Boolean},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Gets a list of all descendants matching the predicate. 
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.HierarchyToList``1(``0,System.Func{``0,System.Boolean},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Gets a list containing this view and all children matching the predicate. 
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds range of items to hash-set.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value to specified range [min, max].
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToBindableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts enumerable to bindable collection.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetLines(System.String,System.Boolean)">
            <summary>
            Gets lines from string.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.InsertOrAdd``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Inserts item to list at index or adds if index is at the end.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.InsertOrAdd(System.String,System.Int32,System.String)">
            <summary>
            Inserts or adds character to string at index or adds if index is at the end.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Finds the index of the first occurrence of an item in an enumerable.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToRgb(Delight.ColorHsv)">
            <summary>
            Converts HSV to RGB color.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToHsv(UnityEngine.Color)">
            <summary>
            Converts RGB to HSV color.
            </summary>
        </member>
        <member name="T:Delight.IInitialize">
            <summary>
            Interface for ensuring initialize method is called once on object construction. 
            </summary>
        </member>
        <member name="T:Delight.INotifyCollectionChanged">
            <summary>
            Interface for collections notifying listeners the collection has been changed.
            </summary>
        </member>
        <member name="T:Delight.INotifyPropertyChanged">
            <summary>
            Interface for objects notifying listeners a property has been changed.
            </summary>
        </member>
        <member name="T:Delight.ItemSelectionActionData">
            <summary>
            Item selection action data.
            </summary>
        </member>
        <member name="T:Delight.ListChangeAction">
            <summary>
            Enum indicating type of list change action initiated.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Add">
            <summary>
            Items added to list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Rearranged">
            <summary>
            Items rearranged within list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Remove">
            <summary>
            Items removed from list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Replace">
            <summary>
            Items replaced in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Clear">
            <summary>
            All items cleared from list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Modify">
            <summary>
            Items modified in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Select">
            <summary>
            Item selected in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.ScrollTo">
            <summary>
            Item scrolled to.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.DynamicAdd">
            <summary>
            DynamicAdd.
            </summary>
        </member>
        <member name="T:Delight.ListChangedEventArgs">
            <summary>
            Contains arguments for the list changed event.
            </summary>
        </member>
        <member name="T:Delight.LoadMode">
            <summary>
            Enum indicating view load mode.
            </summary>
        </member>
        <member name="F:Delight.LoadMode.Automatic">
            <summary>
            View is loaded automatically when parent is loaded. 
            </summary>
        </member>
        <member name="F:Delight.LoadMode.Manual">
            <summary>
            View is loaded when explicitly requested to load by calling its Load method. 
            </summary>
        </member>
        <member name="F:Delight.LoadMode.HiddenWhileLoading">
            <summary>
            View is hidden while loading.
            </summary>
        </member>
        <member name="F:Delight.LoadMode.AwaitAssets">
            <summary>
            Loading of view awaits assets to load before completing.
            </summary>
        </member>
        <member name="T:Delight.LocalizationLabel">
            <summary>
            Holds information about a localized label. Used by the localization mechanism. 
            </summary>
        </member>
        <member name="T:Delight.MappedAssetDependencyProperty`3">
            <summary>
            Dependency property that maps to a unity component asset. E.g. ImageComponent.sprite
            </summary>
        </member>
        <member name="M:Delight.MappedAssetDependencyProperty`3.OnAssetChanged(Delight.DependencyObject)">
            <summary>
            Called when asset has been changed. 
            </summary>
        </member>
        <member name="M:Delight.MappedAssetDependencyProperty`3.#ctor(System.String,System.Func{`2,`1},System.Action{`1,`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.MappedDependencyProperty`3">
            <summary>
            Dependency property that maps to another property or field like a unity component property. E.g. TextComponent.text. Stores no data on its own. 
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetValue(Delight.DependencyObject)">
            <summary>
            Gets mapped dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetValue(Delight.DependencyObject,`0,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetDefault(Delight.DependencyObject,System.Boolean)">
            <summary>
            Gets default value from type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetDefault(Delight.DependencyObject,`0@,System.Boolean)">
            <summary>
            Gets default value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetStateDefault(Delight.DependencyObject)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetStateDefault(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetStateDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetStateDefault(Delight.Template,System.String,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetDefault(Delight.Template,`0)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.Load(Delight.DependencyObject)">
            <summary>
            Initializes the mapped dependency property.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.LoadAsync(Delight.DependencyObject)">
            <summary>
            Initializes the mapped dependency property.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.Unload(Delight.DependencyObject)">
            <summary>
            Clears run-time values for the specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetStateDefault(System.String,Delight.Template,`0)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetDefaultGeneric(Delight.Template,System.Object)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetStateDefaultGeneric(System.String,Delight.Template,System.Object)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has state value set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property has binding.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property has binding.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetHasValue(Delight.DependencyObject,System.Boolean)">
            <summary>
            Sets boolean indicating that value has been set. Used if value is modified directly and not through the dependency property.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetValueGeneric(Delight.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetStateDefaultGeneric(Delight.DependencyObject,System.String)">
            <summary>
            Gets default state value.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.#ctor(System.String,System.Func{`2,`1},System.Func{`1,`0},System.Action{`1,`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.MaskableComponent">
            <summary>
            Enables culling of meshes rendered by the CanvasRenderer component.
            </summary>
        </member>
        <member name="M:Delight.MaskableComponent.Cull(UnityEngine.Rect,System.Boolean)">
            <summary>
            Override to Cull function of MaskableGraphic to prevent Culling.
            </summary>
        </member>
        <member name="T:Delight.ModelObject">
            <summary>
            Base class for model objects.
            </summary>
        </member>
        <member name="T:Delight.NavigationButtonType">
            <summary>
            Enum indicating navigation button type.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonType.NextAndPrevious">
            <summary>
            Next and previous navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonType.Next">
            <summary>
            Next navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonType.Previous">
            <summary>
            Previous navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonType.Page">
            <summary>
            Page navigation.
            </summary>
        </member>
        <member name="T:Delight.NavigationButtonsVisibility">
            <summary>
            Enum indicating the visibility of navigation buttons.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.None">
            <summary>
            No navigation buttons.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.False">
            <summary>
            No navigation buttons.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.True">
            <summary>
            Next/Previous navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.All">
            <summary>
            Both next/previous and page navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.NextPrevious">
            <summary>
            Next/Previous navigation.
            </summary>
        </member>
        <member name="F:Delight.NavigationButtonsVisibility.Page">
            <summary>
            Page navigation.
            </summary>
        </member>
        <member name="T:Delight.RaycastTargetGraphic">
            <summary>
            Non-drawing graphic to provide raycast target without drawing anything.
            </summary>
        </member>
        <member name="T:Delight.OverflowMode">
            <summary>
            Enum indicating how items should overflow as they reach the boundaries.
            </summary>
        </member>
        <member name="F:Delight.OverflowMode.Overflow">
            <summary>
            Items can exceed the boundaries.
            </summary>
        </member>
        <member name="F:Delight.OverflowMode.Wrap">
            <summary>
            Items will wrap as they reach the boundaries.
            </summary>
        </member>
        <member name="T:Delight.RaycastBlockMode">
            <summary>
            Type of raycast blocking should be used.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Default">
            <summary>
            Raycast is blocked if view is displayed and not transparent.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Always">
            <summary>
            Raycast is always blocked.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Never">
            <summary>
            Raycast is never blocked.
            </summary>
        </member>
        <member name="T:Delight.RuntimeBinding">
            <summary>
            Represents a runtime data-binding (single or multi-binding). 
            </summary>
        </member>
        <member name="M:Delight.RuntimeBinding.#ctor(System.Collections.Generic.List{Delight.BindingPath},Delight.BindingPath,System.Boolean,Delight.BindingType,System.Func{System.Object[],System.Object},System.String)">
            <summary>
            Creates a new instance of the class. Used by runtime bindings.
            </summary>
        </member>
        <member name="M:Delight.RuntimeBinding.PropagateSourceToTargetMethod">
            <summary>
            Propagates the source value to target. Used by runtime bindings.
            </summary>
        </member>
        <member name="M:Delight.RuntimeBinding.PropagateTargetToSourceMethod">
            <summary>
            Propagates the target value to source. Used by runtime bindings.
            </summary>
        </member>
        <member name="T:Delight.RuntimeBindingPath">
            <summary>
            Represents a runtime binding target or source. 
            </summary>
        </member>
        <member name="M:Delight.RuntimeBindingPath.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Func{Delight.BindableObject}},System.Boolean,Delight.ValueConverter)">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.RuntimeBindingPath.GetValue">
            <summary>
            Gets value from binding path. 
            </summary>
        </member>
        <member name="M:Delight.RuntimeBindingPath.SetValue(System.Object)">
            <summary>
            Sets value at binding path.
            </summary>
        </member>
        <member name="T:Delight.ScrollBounds">
            <summary>
            Determines how scrolling should be restricted. 
            </summary>
        </member>
        <member name="T:Delight.ScrollbarVisibilityMode">
            <summary>
            Indicates when scrollbar should be shown. 
            </summary>
        </member>
        <member name="T:Delight.SelectionIndicatorScript">
            <summary>
            MonoBehavior for indicating selected element. Used by the LIVE editor. 
            </summary>
        </member>
        <member name="T:Delight.SemaphoreLocker">
            <summary>
            Class for locking an async operation.
            </summary>
        </member>
        <member name="T:Delight.ServerUriLocator">
            <summary>
            Defeault server uri locator. Uses URI specified in config or simulated URI if UseSimulatedUriInEditor is true.
            </summary>
        </member>
        <member name="T:Delight.SplitMode">
            <summary>
            Enum indicating how a gridsplitter should split a grid.
            </summary>
        </member>
        <member name="F:Delight.SplitMode.Rows">
            <summary>
            Split rows so they can be resized.
            </summary>
        </member>
        <member name="F:Delight.SplitMode.Columns">
            <summary>
            Split columns so they can be resized. 
            </summary>
        </member>
        <member name="F:Delight.SplitMode.RowsAndColumns">
            <summary>
            Split both rows and columns so they can be resized.
            </summary>
        </member>
        <member name="T:Delight.StateAnimation">
            <summary>
            Controls a collection of animators activated when transitioning between the specified states.
            </summary>
        </member>
        <member name="M:Delight.StateAnimation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.StorageMode">
            <summary>
            Indicates if asset is stored locally or remote. 
            </summary>
        </member>
        <member name="T:Delight.SwitchMode">
            <summary>
            Enum indicating view switcher mode.
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.Enable">
            <summary>
            Views start out preloaded and enabled/disabled when they are switched to/from
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.Load">
            <summary>
            Views are loaded/unloaded when they are switched to/from.
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.LoadOnce">
            <summary>
            Views are loaded first time when switched to and then enabled/disabled when switched to/from.
            </summary>
        </member>
        <member name="T:Delight.TabSelectionActionData">
            <summary>
            Tab selection action data.
            </summary>
        </member>
        <member name="T:Delight.Template">
            <summary>
            View data template. A data template is associated with a view type and allows for the framework to keep track of an hierarchy of default values. It allows for values in dependenc properties to be stored per type rather than instance.
            </summary>
        </member>
        <member name="M:Delight.Template.#ctor(Delight.Template)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.TraversalAlgorithm">
            <summary>
            Enum indicating what traversal algorithm to use.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.Default">
            <summary>
            Default traversal algorithm (depth first).
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.DepthFirst">
            <summary>
            Depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.BreadthFirst">
            <summary>
            Breadth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.ReverseDepthFirst">
            <summary>
            Reverse depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.ReverseBreadthFirst">
            <summary>
            Reverse breadth first traversal algorithm.
            </summary>
        </member>
        <member name="T:Delight.TypeHelper">
            <summary>
            Helper methods for finding and instantiating objects through reflection.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.InitializeAssemblyTypes">
            <summary>
            Initializes the list of assembly types. 
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.FindDerivedTypes(System.Type)">
            <summary>
            Gets all types derived from specified base type.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Extension method for getting loadable types from an assembly.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.CreateInstance(System.Type)">
            <summary>
            Instiantiates a type.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.GetType(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets type with the specified name and namespace. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Delight.ValueConverter" -->
        <member name="M:Delight.ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter.ConvertGeneric(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter.ConvertGeneric(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter.ConvertToGeneric(System.Object)">
            <summary>
            Converts value to target type. 
            </summary>
        </member>
        <member name="M:Delight.ValueConverter.ConvertFromGeneric(System.Object)">
            <summary>
            Converts value from target type. 
            </summary>
        </member>
        <member name="M:Delight.ValueConverter.InterpolateGeneric(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates values for type. 
            </summary>
        </member>
        <member name="T:Delight.ValueConverter`1">
            <summary>
            Generic base class for value converters.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.ConvertGeneric(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.ConvertGeneric(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Interpolate(`0,`0,System.Single)">
            <summary>
            Interpolates value for type.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.InterpolateGeneric(System.Object,System.Object,System.Single)">
            <summary>
            Interpolates values for type. 
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linear interpolation between two float values.
            </summary>
        </member>
        <member name="T:Delight.ValueConverters">
            <summary>
            Helper class for value converters.
            </summary>
        </member>
        <member name="M:Delight.ValueConverters.GetInitializer(System.String,System.String)">
            <summary>
            Gets initializer from type name and string value.
            </summary>
        </member>
        <member name="M:Delight.ValueConverters.Get(System.String)">
            <summary>
            Gets value converter for type.
            </summary>
        </member>
        <member name="T:Delight.AssetObjectValueConverter">
            <summary>
            Asset value converter.
            </summary>
        </member>
        <member name="M:Delight.AssetObjectValueConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.AssetObjectValueConverter.GetInitializer(System.String,System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.AssetObjectValueConverter.ConvertGeneric(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.AssetObjectValueConverter.ConvertGeneric(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.BoolValueConverter">
            <summary>
            Bool value converter.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.CellIndexValueConverter">
            <summary>
            CellIndex value converter.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ColorHsv">
            <summary>
            Color defined in HSV format.
            </summary>
        </member>
        <member name="T:Delight.ColorValueConverter">
            <summary>
            Color value converter.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.HexToColor(System.String)">
            <summary>
            Gets color from hex value.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.RgbaToColor(System.String)">
            <summary>
            Gets color from float RGBA values (0-1)
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Interpolate(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Interpolates value for type.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Interpolator(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Interpolates value for type.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.HsvInterpolator(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Interpolates value for type.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinitionsValueConverter">
            <summary>
            ColumnDefinitions value converter.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ElementMarginValueConverter">
            <summary>
            ElementMargin value converter.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ElementSizeValueConverter">
            <summary>
            ElementSize value converter.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.EnumValueConverter`1">
            <summary>
            Enum value converter.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.FloatValueConverter">
            <summary>
            Float value converter.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.GenericEnumValueConverter">
            <summary>
            Enum value converter.
            </summary>
        </member>
        <member name="M:Delight.GenericEnumValueConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.GenericEnumValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.GenericEnumValueConverter.ConvertGeneric(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.GenericEnumValueConverter.ConvertGeneric(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.IntValueConverter">
            <summary>
            Int value converter.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.QuaternionValueConverter">
            <summary>
            Quaternion value converter.
            </summary>
        </member>
        <member name="M:Delight.QuaternionValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.QuaternionValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.QuaternionValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.RowDefinitionsValueConverter">
            <summary>
            RowDefinitions value converter.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ScrollbarVisibilityConverter">
            <summary>
            ScrollbarVisibility converter.
            </summary>
        </member>
        <member name="T:Delight.SpriteAssetValueConverter">
            <summary>
            Sprite asset value converter.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.StringValueConverter">
            <summary>
            String value converter.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector2ValueConverter">
            <summary>
            Vector2 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector3ValueConverter">
            <summary>
            Vector3 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector4ValueConverter">
            <summary>
            Vector3 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ViewAction">
            <summary>
            A view action keeps a list of action handlers and allows for easy enabling / disabling invoking them when the action is triggered.
            </summary>
        </member>
        <member name="M:Delight.ViewAction.ResolveActionHandler(System.Object,System.String,System.Func{System.Object}[])">
            <summary>
            Resolves action handler from name. 
            </summary>
        </member>
        <member name="T:Delight.ViewMethod">
            <summary>
            Contains information about a view method.
            </summary>
        </member>
        <member name="T:Delight.ViewPresenter">
            <summary>
            MonoBehavior for presenting a view in the scene. Used to e.g. create and load the main scene view.
            </summary>
        </member>
        <member name="M:Delight.ViewPresenter.Create">
            <summary>
            Instantiates the view to be presented.
            </summary>
        </member>
        <member name="T:Delight.VirtualItem">
            <summary>
            Represents a virtual item. Contains information about its size, offset and alignment. Used by virtualized lists to keep track of list items that are yet to be realized.
            </summary>
        </member>
        <member name="P:Delight.VirtualItem.Index">
            <summary>
            Zero-based index of the item.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ContentTemplate)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.FromWidth(Delight.ElementSize)">
            <summary>
            Gets element sizes from width.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.FromHeight(Delight.ElementSize)">
            <summary>
            Gets element sizes from height.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.ToString">
            <summary>
            Converts element sizes to string.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.Equals(System.Object)">
            <summary>
            Compares element sizes.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Delight.XmlEditorComponent">
            <summary>
            XML editor component used by the delight designer. Based on the TextMeshPro input field.
            </summary>
        </member>
        <member name="T:Awaiters">
            <summary>
            Async Await Utility for Unity. Read more at: http://www.stevevermeulen.com/index.php/2017/09/23/using-async-await-in-unity3d-2017/
            </summary>
        </member>
        <member name="M:TMPro.Examples.SkewTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawCharactersBounds">
            <summary>
            Method to draw a rectangle around each character.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawWordBounds">
            <summary>
            Method to draw rectangles around each word of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLinkBounds">
            <summary>
            Draw rectangle around each of the links contained in the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLineBounds">
            <summary>
            Draw Rectangles around each lines of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawBounds">
            <summary>
            Draw Rectangle around the bounds of the text object.
            </summary>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealCharacters(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one character at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealWords(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one word at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexColorCycler.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.Examples.VertexJitter.VertexAnim">
            <summary>
            Structure to hold pre-computed animation data.
            </summary>
        </member>
        <member name="M:TMPro.Examples.VertexJitter.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeA.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeB.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexZoom.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.WarpTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_DigitValidator">
            <summary>
            EXample of a Custom Character Input Validator to only allow digits from 0 to 9.
            </summary>
        </member>
        <member name="T:TMPro.TMP_PhoneNumberValidator">
            <summary>
            Example of a Custom Character Input Validator to only allow phone number in the (800) 555-1212 format.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onCharacterSelection">
            <summary>
            Event delegate triggered when pointer is over a character.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onSpriteSelection">
            <summary>
            Event delegate triggered when pointer is over a sprite.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onWordSelection">
            <summary>
            Event delegate triggered when pointer is over a word.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLineSelection">
            <summary>
            Event delegate triggered when pointer is over a line.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLinkSelection">
            <summary>
            Event delegate triggered when pointer is over a link.
            </summary>
        </member>
    </members>
</doc>
